# app/main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
from fastapi import FastAPI
from contextlib import asynccontextmanager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from app.database import init_db
from app.api.cars import router as cars_router
from app.api.analysis import router as analysis_router
from app.api.reports import router as reports_router
from app.services.monitor_service import MonitorService
from app.services.changes_service import ChangesTrackingService
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global scheduler and services
scheduler = AsyncIOScheduler()
monitor_service = MonitorService()
changes_service = ChangesTrackingService()


async def check_cars_with_night_pause():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω —Å —É—á–µ—Ç–æ–º –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    current_hour = datetime.now().hour

    if 2 <= current_hour < 6:
        logger.info("üò¥ –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (02:00-06:00) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω")
        return

    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω...")
    await monitor_service.check_new_cars()


async def scheduled_ai_analysis():
    """ü§ñ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"""
    try:
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –≤ {current_time}")

        from app.services.analysis_service import AnalysisService
        from app.services.telegram_service import TelegramService

        analysis_service = AnalysisService()
        telegram_service = TelegramService()

        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        result = await analysis_service.analyze_full_database(min_cars_per_brand=3)

        if result.get("success"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram —Å –ø–æ–º–µ—Ç–∫–æ–π –æ scheduled –∞–Ω–∞–ª–∏–∑–µ
            await telegram_service.send_scheduled_analysis_report(result)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            recommended_ids = result.get("recommended_car_ids", [])
            if recommended_ids:
                await telegram_service.send_top_deals_notification(result, recommended_ids)

            logger.info(f"‚úÖ Scheduled AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω, "
                        f"{len(recommended_ids)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            logger.error(f"‚ùå Scheduled AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {result.get('error')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ scheduled AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            telegram_service = TelegramService()
            await telegram_service.send_error_notification(f"Scheduled AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
        except:
            pass


async def daily_changes_check():
    """üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö"""
    try:
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ {current_time}")

        await changes_service.check_all_cars_for_changes()

        logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            from app.services.telegram_service import TelegramService
            telegram_service = TelegramService()
            await telegram_service.send_error_notification(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
        except:
            pass


async def weekly_price_drops_check():
    """üí∏ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω"""
    try:
        logger.info("üí∏ –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω...")

        from app.repository.car_repository import CarRepository
        from app.database import async_session

        async with async_session() as session:
            repo = CarRepository(session)
            cars_with_drops = await repo.get_cars_with_price_drops(days=7, min_drop_euros=1000)

            if cars_with_drops:
                await changes_service.telegram.send_price_drops_alert(cars_with_drops, 1000)
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cars_with_drops)} –º–∞—à–∏–Ω —Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞–¥–µ–Ω–∏–µ–º —Ü–µ–Ω")
            else:
                logger.info("üí∏ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω: {e}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await init_db()
    logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # üîç Schedule monitoring with random interval (5-10 min) and night pause
    scheduler.add_job(
        check_cars_with_night_pause,
        'interval',
        minutes=35,  # –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        jitter=300,  # ¬±2.5 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏—Ç–æ–≥–æ 5-10 –º–∏–Ω)
        id='car_monitor'
    )

    # ü§ñ AI –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
    scheduler.add_job(
        scheduled_ai_analysis,
        'cron',
        hour='9,18',  # 09:00 –∏ 18:00
        minute=0,
        id='scheduled_ai_analysis',
        timezone='Europe/Nicosia'  # –ö–∏–ø—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è
    )

    # üîÑ –ù–û–í–û–ï: –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
    scheduler.add_job(
        daily_changes_check,
        'cron',
        hour=14,  # 14:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–∏–ø—Ä–∞
        minute=30,
        id='daily_changes_check',
        timezone='Europe/Nicosia'
    )

    # üí∏ –ù–û–í–û–ï: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω
    scheduler.add_job(
        weekly_price_drops_check,
        'cron',
        day_of_week='sun',  # –ö–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        hour=10,
        minute=0,
        id='weekly_price_drops_check',
        timezone='Europe/Nicosia'
    )

    scheduler.start()
    logger.info("‚è∞ Scheduler –∑–∞–ø—É—â–µ–Ω:")
    logger.info("  - üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω: –∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç (–Ω–æ—á—å—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    logger.info("  - ü§ñ AI –∞–Ω–∞–ª–∏–∑: 09:00 –∏ 18:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–∏–ø—Ä–∞")
    logger.info("  - üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: 14:30 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    logger.info("  - üí∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00")

    yield

    # Shutdown
    scheduler.shutdown()
    await monitor_service.telegram.close()


app = FastAPI(
    title="Car Monitor Bot with Changes Tracking",
    description="Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ Bazaraki —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∏ –æ–ø–∏—Å–∞–Ω–∏–π",
    version="2.3.0",
    lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(cars_router)
app.include_router(analysis_router)
app.include_router(reports_router)

# üÜï –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
from app.api.changes import router as changes_router

app.include_router(changes_router)


# üÜï –ù–æ–≤—ã–µ endpoints –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
@app.post("/changes/check-all")
async def trigger_changes_check():
    """üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—Å–µ—Ö –º–∞—à–∏–Ω"""
    await changes_service.check_all_cars_for_changes()
    return {"message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞"}


@app.post("/changes/check-cars")
async def check_specific_cars_changes(car_ids: list[int]):
    """üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω"""
    result = await changes_service.check_specific_cars_changes(car_ids)
    return result


@app.get("/changes/summary")
async def get_recent_changes_summary(days: int = 7):
    """üìä –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
    result = await changes_service.get_recent_changes_summary(days)
    return result


@app.post("/changes/price-drops-alert")
async def trigger_price_drops_alert(days: int = 7, min_drop: int = 1000):
    """üí∏ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–¥–µ–Ω–∏–π —Ü–µ–Ω"""
    from app.repository.car_repository import CarRepository
    from app.database import async_session

    async with async_session() as session:
        repo = CarRepository(session)
        cars_with_drops = await repo.get_cars_with_price_drops(days, min_drop)

        if cars_with_drops:
            await changes_service.telegram.send_price_drops_alert(cars_with_drops, min_drop)
            return {
                "message": f"–ù–∞–π–¥–µ–Ω–æ {len(cars_with_drops)} –º–∞—à–∏–Ω —Å–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –Ω–∞ {min_drop}‚Ç¨+",
                "cars_count": len(cars_with_drops)
            }
        else:
            return {
                "message": f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—à–∏–Ω —Å–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –Ω–∞ {min_drop}‚Ç¨+ –∑–∞ {days} –¥–Ω–µ–π",
                "cars_count": 0
            }


@app.get("/")
async def root():
    return {
        "message": "Car Monitor Bot with Changes Tracking —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "version": "2.3.0",
        "features": [
            "monitoring",
            "scheduled_ai_analysis",
            "changes_tracking",
            "price_drops_alerts",
            "telegram_notifications",
            "html_reports"
        ],
        "schedule": {
            "monitoring": "–∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç (–ø–∞—É–∑–∞ –Ω–æ—á—å—é)",
            "ai_analysis": "09:00 –∏ 18:00 (–ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫)",
            "changes_check": "14:30 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            "price_drops_check": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00"
        }
    }


@app.get("/health")
async def health():
    return {
        "status": "OK",
        "features": [
            "monitoring",
            "scheduled_ai_analysis",
            "changes_tracking",
            "price_drops_alerts",
            "telegram_notifications",
            "html_reports",
            "database_analysis"
        ],
        "endpoints": {
            "cars": "/cars",
            "analysis": "/analysis",
            "reports": "/reports",
            "changes": "/changes"
        },
        "schedule": {
            "monitoring": "–∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç",
            "ai_analysis": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å 2 —Ä–∞–∑–∞ (09:00, 18:00)",
            "changes_check": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å (14:30)",
            "price_drops": "–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–≤—Å 10:00)"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app.main:app", host="0.0.0.0", port=8000)