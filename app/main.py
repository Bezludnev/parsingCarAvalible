# app/main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å scheduled AI –∞–Ω–∞–ª–∏–∑–æ–º
from fastapi import FastAPI
from contextlib import asynccontextmanager
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from app.database import init_db
from app.api.cars import router as cars_router
from app.api.analysis import router as analysis_router
from app.api.reports import router as reports_router
from app.services.monitor_service import MonitorService
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global scheduler
scheduler = AsyncIOScheduler()
monitor_service = MonitorService()


async def check_cars_with_night_pause():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    current_hour = datetime.now().hour

    if 2 <= current_hour < 6:
        logger.info("–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (02:00-06:00) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return

    await monitor_service.check_new_cars()


async def scheduled_ai_analysis():
    """ü§ñ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å"""
    try:
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –≤ {current_time}")

        from app.services.analysis_service import AnalysisService
        from app.services.telegram_service import TelegramService

        analysis_service = AnalysisService()
        telegram_service = TelegramService()

        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        result = await analysis_service.analyze_full_database(min_cars_per_brand=3)

        if result.get("success"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram —Å –ø–æ–º–µ—Ç–∫–æ–π –æ scheduled –∞–Ω–∞–ª–∏–∑–µ
            await telegram_service.send_scheduled_analysis_report(result)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            recommended_ids = result.get("recommended_car_ids", [])
            if recommended_ids:
                await telegram_service.send_top_deals_notification(result, recommended_ids)

            logger.info(f"‚úÖ Scheduled AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω, "
                        f"{len(recommended_ids)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        else:
            logger.error(f"‚ùå Scheduled AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {result.get('error')}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ scheduled AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            telegram_service = TelegramService()
            await telegram_service.send_error_notification(f"Scheduled AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}")
        except:
            pass


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    # Schedule monitoring with random interval (5-10 min) and night pause
    scheduler.add_job(
        check_cars_with_night_pause,
        'interval',
        minutes=35,  # –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        jitter=300,  # ¬±2.5 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏—Ç–æ–≥–æ 5-10 –º–∏–Ω)
        id='car_monitor'
    )

    # ü§ñ –ù–û–í–û–ï: AI –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
    scheduler.add_job(
        scheduled_ai_analysis,
        'cron',
        hour='9,18',  # 09:00 –∏ 18:00
        minute=0,
        id='scheduled_ai_analysis',
        timezone='Europe/Nicosia'  # –ö–∏–ø—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è
    )

    scheduler.start()
    logger.info("Scheduler –∑–∞–ø—É—â–µ–Ω:")
    logger.info("  - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç (–Ω–æ—á—å—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    logger.info("  - AI –∞–Ω–∞–ª–∏–∑: 09:00 –∏ 18:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–∏–ø—Ä–∞")

    yield

    # Shutdown
    scheduler.shutdown()
    await monitor_service.telegram.close()


app = FastAPI(
    title="Car Monitor Bot with Scheduled AI Analysis",
    description="Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ Bazaraki —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –∞–Ω–∞–ª–∏–∑–æ–º 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
    version="2.2.0",
    lifespan=lifespan
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(cars_router)
app.include_router(analysis_router)
app.include_router(reports_router)


@app.get("/")
async def root():
    return {
        "message": "Car Monitor Bot with Scheduled AI Analysis —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "version": "2.2.0",
        "features": [
            "monitoring",
            "scheduled_ai_analysis",
            "telegram_notifications",
            "html_reports",
            "deal_hunting"
        ],
        "schedule": {
            "monitoring": "–∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç (–ø–∞—É–∑–∞ –Ω–æ—á—å—é)",
            "ai_analysis": "09:00 –∏ 18:00 (–ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫)"
        }
    }


@app.get("/health")
async def health():
    return {
        "status": "OK",
        "features": [
            "monitoring",
            "scheduled_ai_analysis",
            "telegram_notifications",
            "html_reports",
            "file_downloads",
            "deal_hunting",
            "database_analysis"
        ],
        "endpoints": {
            "cars": "/cars",
            "analysis": "/analysis",
            "reports": "/reports"
        },
        "schedule": {
            "monitoring": "–∫–∞–∂–¥—ã–µ 5-10 –º–∏–Ω—É—Ç",
            "ai_analysis": "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å 2 —Ä–∞–∑–∞ (09:00, 18:00)"
        }
    }


if __name__ == "__main__":
    import uvicorn

    uvicorn.run("app.main:app", host="0.0.0.0", port=8000)