# app/api/reports.py - API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞–º–∏
from fastapi import APIRouter, HTTPException, Query
from fastapi.responses import FileResponse
from app.services.html_service import HTMLReportService
from app.services.telegram_service import TelegramService
from typing import List, Dict, Any
import logging
import os

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/reports", tags=["HTML Reports"])


@router.get("/list")
async def get_reports_list(limit: int = Query(default=10, ge=1, le=50)):
    """üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ HTML –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        html_service = HTMLReportService()
        reports = html_service.get_reports_list(limit)

        return {
            "status": "success",
            "total_reports": len(reports),
            "reports": reports
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@router.get("/download/{filename}")
async def download_report(filename: str):
    """üì• –°–∫–∞—á–∞—Ç—å HTML –æ—Ç—á–µ—Ç –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    try:
        html_service = HTMLReportService()
        file_path = html_service.reports_dir / filename

        if not file_path.exists():
            raise HTTPException(status_code=404, detail="–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not filename.endswith('.html'):
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

        return FileResponse(
            path=str(file_path),
            filename=filename,
            media_type='text/html'
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ {filename}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@router.delete("/cleanup")
async def cleanup_old_reports(keep_days: int = Query(default=7, ge=1, le=30)):
    """üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ HTML –æ—Ç—á–µ—Ç—ã"""
    try:
        html_service = HTMLReportService()
        deleted_count = html_service.clean_old_reports(keep_days)

        return {
            "status": "success",
            "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –æ—Ç—á–µ—Ç–æ–≤ —Å—Ç–∞—Ä—à–µ {keep_days} –¥–Ω–µ–π",
            "deleted_count": deleted_count,
            "keep_days": keep_days
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@router.post("/send-list-to-telegram")
async def send_reports_list_to_telegram():
    """üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram"""
    try:
        telegram_service = TelegramService()
        await telegram_service.send_reports_list()

        return {
            "status": "success",
            "message": "–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –≤ Telegram: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@router.get("/stats")
async def get_reports_statistics():
    """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ HTML –æ—Ç—á–µ—Ç–∞–º"""
    try:
        html_service = HTMLReportService()
        reports = html_service.get_reports_list(100)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        if not reports:
            return {
                "status": "success",
                "total_reports": 0,
                "total_size_mb": 0,
                "avg_size_mb": 0,
                "oldest_report": None,
                "newest_report": None
            }

        total_size_mb = sum(report["size_mb"] for report in reports)
        avg_size_mb = round(total_size_mb / len(reports), 2)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        reports_by_date = sorted(reports, key=lambda x: x["created"])
        oldest = reports_by_date[0] if reports_by_date else None
        newest = reports_by_date[-1] if reports_by_date else None

        return {
            "status": "success",
            "total_reports": len(reports),
            "total_size_mb": round(total_size_mb, 2),
            "avg_size_mb": avg_size_mb,
            "oldest_report": oldest,
            "newest_report": newest
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@router.post("/test-html-generation")
async def test_html_generation():
    """üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞ (—Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        test_analysis_result = {
            "total_cars_analyzed": 3,
            "analysis_type": "test",
            "filter_name": "test_filter",
            "model_used": "test_model",
            "top_recommendations": """
1. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #1 - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
2. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #2 - –Ω–∞–¥–µ–∂–Ω–∞—è –º–æ–¥–µ–ª—å —Å –Ω–∏–∑–∫–∏–º –ø—Ä–æ–±–µ–≥–æ–º
3. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #3 - –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ
            """.strip(),
            "detailed_analysis": """
–ê–≤—Ç–æ–º–æ–±–∏–ª—å #1:
‚úÖ –ü–ª—é—Å—ã: –ù–∏–∑–∫–∏–π –ø—Ä–æ–±–µ–≥, —Ö–æ—Ä–æ—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚ùå –ú–∏–Ω—É—Å—ã: –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å
üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä—ã–Ω–∫—É
üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–û–ö–£–ü–ê–¢–¨

–ê–≤—Ç–æ–º–æ–±–∏–ª—å #2:
‚úÖ –ü–ª—é—Å—ã: –ü—Ä–µ–º–∏—É–º –º–∞—Ä–∫–∞, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
‚ùå –ú–∏–Ω—É—Å—ã: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ–±–µ–≥
üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã: –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ 10%
üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢–û–†–ì–û–í–ê–¢–¨–°–Ø
            """.strip(),
            "general_conclusions": """
–ù–∞ —Ä—ã–Ω–∫–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø—Ä–æ–±–µ–≥–æ–º –¥–æ 150,000 –∫–º.
–õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –º–æ–¥–µ–ª–∏ 2015-2018 –≥–æ–¥–æ–≤.
            """.strip(),
            "recommended_car_ids": [1, 3],
            "cars_data": [
                {
                    "id": 1,
                    "title": "BMW 3 Series 320d 2016",
                    "brand": "BMW",
                    "year": 2016,
                    "price": "‚Ç¨15,000",
                    "mileage": 120000,
                    "link": "https://example.com/car1"
                },
                {
                    "id": 2,
                    "title": "Mercedes C-Class 2017",
                    "brand": "Mercedes",
                    "year": 2017,
                    "price": "‚Ç¨18,500",
                    "mileage": 95000,
                    "link": "https://example.com/car2"
                },
                {
                    "id": 3,
                    "title": "Audi A4 2015",
                    "brand": "Audi",
                    "year": 2015,
                    "price": "‚Ç¨13,200",
                    "mileage": 140000,
                    "link": "https://example.com/car3"
                }
            ]
        }

        html_service = HTMLReportService()
        file_path = html_service.generate_analysis_report(test_analysis_result)
        filename = os.path.basename(file_path)

        return {
            "status": "success",
            "message": "–¢–µ—Å—Ç–æ–≤—ã–π HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "filename": filename,
            "file_path": file_path,
            "download_url": f"/reports/download/{filename}"
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")