# app/api/car_details.py - –ù–û–í–´–ô API –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_db
from app.repository.car_repository import CarRepository
from app.schemas.car import CarResponse, CarDetailUpdate
from app.services.scraper_service import ScraperService
from typing import List, Optional
import logging

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/car-details", tags=["Car Details"])


@router.get("/without-details", response_model=List[CarResponse])
async def get_cars_without_details(
        limit: int = Query(default=20, ge=1, le=100),
        db: AsyncSession = Depends(get_db)
):
    """üìã –ü–æ–ª—É—á–∏—Ç—å –º–∞—à–∏–Ω—ã –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    repo = CarRepository(db)
    cars = await repo.get_cars_without_details(limit)
    return cars


@router.get("/with-details", response_model=List[CarResponse])
async def get_cars_with_details(
        filter_name: Optional[str] = Query(default=None),
        limit: int = Query(default=15, ge=1, le=50),
        db: AsyncSession = Depends(get_db)
):
    """üìã –ü–æ–ª—É—á–∏—Ç—å –º–∞—à–∏–Ω—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    repo = CarRepository(db)
    cars = await repo.get_cars_with_details(filter_name, limit)
    return cars


@router.post("/parse-details/{car_id}")
async def parse_car_details(
        car_id: int,
        background_tasks: BackgroundTasks,
        db: AsyncSession = Depends(get_db)
):
    """üîç –ó–∞–ø–∞—Ä—Å–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    repo = CarRepository(db)
    car = await repo.get_by_id(car_id)

    if not car:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if car.details_parsed:
        return {
            "message": "–î–µ—Ç–∞–ª–∏ —É–∂–µ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω—ã",
            "car_id": car_id,
            "parsed_at": car.details_parsed_at
        }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(parse_single_car_details_task, car_id, car.link)

    return {
        "message": "–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ",
        "car_id": car_id,
        "status": "processing"
    }


@router.post("/parse-batch")
async def parse_details_batch(
        background_tasks: BackgroundTasks,
        filter_name: Optional[str] = Query(default=None),
        limit: int = Query(default=10, ge=1, le=30),
        db: AsyncSession = Depends(get_db)
):
    """üîÑ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–∞—à–∏–Ω –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    repo = CarRepository(db)

    if filter_name:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—à–∏–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
        all_cars = await repo.get_cars_by_filter(filter_name, 100)
        cars_without_details = [car for car in all_cars if not car.details_parsed][:limit]
    else:
        cars_without_details = await repo.get_cars_without_details(limit)

    if not cars_without_details:
        return {
            "message": "–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π",
            "total_cars": 0
        }

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(
        parse_batch_details_task,
        [car.id for car in cars_without_details],
        [car.link for car in cars_without_details]
    )

    return {
        "message": f"–ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(cars_without_details)} –º–∞—à–∏–Ω",
        "total_cars": len(cars_without_details),
        "filter_name": filter_name,
        "status": "processing"
    }


@router.get("/search")
async def search_cars_by_characteristics(
        mot_till: Optional[str] = Query(default=None),
        colour: Optional[str] = Query(default=None),
        gearbox: Optional[str] = Query(default=None),
        fuel_type: Optional[str] = Query(default=None),
        condition: Optional[str] = Query(default=None),
        limit: int = Query(default=20, ge=1, le=50),
        db: AsyncSession = Depends(get_db)
):
    """üîé –ü–æ–∏—Å–∫ –º–∞—à–∏–Ω –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º"""
    repo = CarRepository(db)
    cars = await repo.search_cars_by_characteristics(
        mot_till=mot_till,
        colour=colour,
        gearbox=gearbox,
        fuel_type=fuel_type,
        condition=condition,
        limit=limit
    )

    return {
        "total_found": len(cars),
        "search_criteria": {
            "mot_till": mot_till,
            "colour": colour,
            "gearbox": gearbox,
            "fuel_type": fuel_type,
            "condition": condition
        },
        "cars": cars
    }


@router.get("/stats")
async def get_detailed_stats(db: AsyncSession = Depends(get_db)):
    """üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
    repo = CarRepository(db)
    stats = await repo.get_cars_stats_detailed()

    return {
        "status": "success",
        "statistics": stats
    }


@router.put("/update/{car_id}")
async def update_car_details_manually(
        car_id: int,
        details: CarDetailUpdate,
        db: AsyncSession = Depends(get_db)
):
    """‚úèÔ∏è –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    repo = CarRepository(db)

    updated_car = await repo.update_car_details(car_id, details)
    if not updated_car:
        raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return {
        "message": "–î–µ—Ç–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        "car_id": car_id,
        "updated_at": updated_car.details_parsed_at
    }


# === –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò ===

async def parse_single_car_details_task(car_id: int, car_link: str):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–∞—à–∏–Ω—ã ID {car_id}")

        scraper = ScraperService()
        driver = scraper._create_driver()

        try:
            detail_update = scraper.parse_car_details(driver, car_link)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            from app.database import async_session
            async with async_session() as session:
                repo = CarRepository(session)
                await repo.update_car_details(car_id, detail_update)

            logger.info(f"‚úÖ –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–∞—à–∏–Ω—ã ID {car_id}")

        finally:
            driver.quit()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–∞—à–∏–Ω—ã ID {car_id}: {e}")


async def parse_batch_details_task(car_ids: List[int], car_links: List[str]):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {len(car_ids)} –º–∞—à–∏–Ω")

        scraper = ScraperService()
        detail_updates = await scraper.scrape_car_details_batch(car_links)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã –≤ –±–∞–∑–µ
        from app.database import async_session
        async with async_session() as session:
            repo = CarRepository(session)

            for car_id, detail_update in zip(car_ids, detail_updates):
                await repo.update_car_details(car_id, detail_update)

        success_count = sum(1 for update in detail_updates if update.details_parsed)
        logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(car_ids)} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")