# app/api/analysis.py - –° SCHEDULED ENDPOINTS
from fastapi import APIRouter, HTTPException, BackgroundTasks, Query
from app.services.analysis_service import AnalysisService
from app.schemas.analysis import (
    AnalysisResponse,
    ComparisonRequest,
    RecentCarsRequest,
    QuickAnalysisResponse
)
from datetime import datetime
import logging

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/analysis", tags=["AI Analysis"])


# ü§ñ –ù–û–í–´–ï SCHEDULED ENDPOINTS

@router.post("/scheduled-analysis")
async def trigger_scheduled_analysis():
    """ü§ñ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ scheduled AI –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
    try:
        from app.services.analysis_service import AnalysisService
        from app.services.telegram_service import TelegramService

        analysis_service = AnalysisService()
        telegram_service = TelegramService()

        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await analysis_service.analyze_full_database(min_cars_per_brand=3)

        if not result.get("success", True):
            raise HTTPException(status_code=404, detail=result.get("error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ scheduled –∞–Ω–∞–ª–∏–∑
        await telegram_service.send_scheduled_analysis_report(result)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        recommended_ids = result.get("recommended_car_ids", [])
        if recommended_ids:
            await telegram_service.send_top_deals_notification(result, recommended_ids)

        return {
            "status": "success",
            "analysis_type": "scheduled_manual",
            "cars_analyzed": result.get("total_cars_analyzed", 0),
            "brands_analyzed": len(result.get("brands_analyzed", [])),
            "recommendations": len(recommended_ids),
            "message": "Manual scheduled –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Manual scheduled analysis error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ manual scheduled –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.get("/scheduler-status")
async def get_scheduler_status():
    """‚è∞ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        from app.main import scheduler

        jobs = []
        for job in scheduler.get_jobs():
            next_run = job.next_run_time.strftime("%d.%m.%Y %H:%M:%S") if job.next_run_time else "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
            jobs.append({
                "id": job.id,
                "name": job.name or job.id,
                "next_run": next_run,
                "trigger": str(job.trigger)
            })

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ scheduled AI –∞–Ω–∞–ª–∏–∑–µ
        ai_job = next((job for job in jobs if "ai_analysis" in job["id"]), None)

        return {
            "scheduler_running": scheduler.running,
            "all_jobs": jobs,
            "ai_analysis_job": ai_job,
            "timezone": "Europe/Nicosia",
            "schedule": "09:00 –∏ 18:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ö–∏–ø—Ä–∞",
            "current_time": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
            "status": "operational" if ai_job else "no_ai_job"
        }

    except Exception as e:
        logger.error(f"‚ùå Scheduler status error: {e}")
        return {
            "scheduler_running": False,
            "error": str(e),
            "status": "error"
        }


# üéØ –û–°–ù–û–í–ù–´–ï ENDPOINTS –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–ê–ó–´

@router.post("/full-market", response_model=AnalysisResponse)
async def analyze_full_market(
        min_cars_per_brand: int = Query(default=5, ge=1, le=50, description="–ú–∏–Ω–∏–º—É–º –º–∞—à–∏–Ω –Ω–∞ –±—Ä–µ–Ω–¥"),
        background_tasks: BackgroundTasks = None
):
    """üéØ –ì–õ–ê–í–ù–´–ô: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ o3-mini (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤!)"""
    try:
        service = AnalysisService()
        result = await service.analyze_full_database(min_cars_per_brand)

        if not result.get("success", True):
            raise HTTPException(status_code=404, detail=result.get("error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"))

        # –í —Ñ–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if background_tasks:
            background_tasks.add_task(_send_to_telegram_bg, result, "full_market")

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Full market analysis error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {str(e)}")


@router.post("/market-trends", response_model=AnalysisResponse)
async def analyze_market_trends(
        days: int = Query(default=14, ge=7, le=60, description="–ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"),
        background_tasks: BackgroundTasks = None
):
    """üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        service = AnalysisService()
        result = await service.analyze_recent_market_trends(days)

        if not result.get("success", True):
            raise HTTPException(status_code=404, detail=result.get("error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"))

        if background_tasks:
            background_tasks.add_task(_send_to_telegram_bg, result, "trends")

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Market trends analysis error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")


@router.get("/market-summary")
async def get_market_summary():
    """‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É (–±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞)"""
    try:
        service = AnalysisService()
        result = await service.get_market_insights_summary()
        return result

    except Exception as e:
        logger.error(f"‚ùå Market summary error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {str(e)}")


@router.post("/send-full-market-to-telegram")
async def send_full_market_analysis_to_telegram(
        min_cars_per_brand: int = Query(default=5, ge=1, le=50)
):
    """üì± –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        service = AnalysisService()
        result = await service.analyze_full_database(min_cars_per_brand)

        if not result.get("success", True):
            raise HTTPException(status_code=404, detail=result.get("error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram —Å HTML –æ—Ç—á–µ—Ç–æ–º
        from app.services.telegram_service import TelegramService
        telegram = TelegramService()
        await telegram.send_ai_analysis_report(result, urgent_mode=False)

        return {
            "status": "sent_to_telegram",
            "analysis_type": "full_market",
            "cars_analyzed": result.get("total_cars_analyzed", 0),
            "brands_analyzed": len(result.get("brands_analyzed", [])),
            "message": "–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram —Å HTML –æ—Ç—á–µ—Ç–æ–º"
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Send full market to Telegram error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.post("/send-trends-to-telegram")
async def send_trends_analysis_to_telegram(
        days: int = Query(default=14, ge=7, le=60)
):
    """üì± –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram"""
    try:
        service = AnalysisService()
        result = await service.analyze_recent_market_trends(days)

        if not result.get("success", True):
            raise HTTPException(status_code=404, detail=result.get("error", "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"))

        from app.services.telegram_service import TelegramService
        telegram = TelegramService()
        await telegram.send_ai_analysis_report(result, urgent_mode=False)

        return {
            "status": "sent_to_telegram",
            "analysis_type": "market_trends",
            "cars_analyzed": result.get("total_cars_analyzed", 0),
            "recent_cars": result.get("recent_cars_count", 0),
            "trends_period": days,
            "message": f"–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
        }

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Send trends to Telegram error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}")


# üìä ENDPOINTS –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò

@router.get("/database-stats")
async def get_database_statistics():
    """üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.repository.car_repository import CarRepository
        from app.database import async_session

        async with async_session() as session:
            repo = CarRepository(session)

            global_stats = await repo.get_global_statistics()
            recent_stats = await repo.get_recent_statistics(7)
            brands_breakdown = await repo.get_brands_breakdown()
            filters_breakdown = await repo.get_filters_breakdown()
            price_ranges = await repo.get_price_ranges_analysis()
            year_distribution = await repo.get_year_distribution()
            daily_activity = await repo.get_market_activity_by_days(30)

            return {
                "status": "success",
                "global_statistics": global_stats,
                "recent_week_statistics": recent_stats,
                "brands_breakdown": brands_breakdown,
                "filters_breakdown": filters_breakdown,
                "price_ranges_analysis": price_ranges,
                "year_distribution": year_distribution,
                "daily_activity_last_30_days": daily_activity,
                "analysis_ready": global_stats.get("total_cars", 0) >= 20,
                "recommended_analysis": "full_market" if global_stats.get("total_cars", 0) >= 50 else "legacy"
            }

    except Exception as e:
        logger.error(f"‚ùå Database stats error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


# üîß LEGACY ENDPOINTS (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

@router.post("/by-filter/{filter_name}", response_model=AnalysisResponse)
async def analyze_by_filter(
        filter_name: str,
        limit: int = Query(default=20, ge=5, le=50)
):
    """ü§ñ AI –∞–Ω–∞–ª–∏–∑ –º–∞—à–∏–Ω –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (LEGACY - –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã)"""
    try:
        service = AnalysisService()
        result = await service.analyze_cars_by_filter(filter_name, limit)

        if "error" in result:
            raise HTTPException(status_code=404, detail=result["error"])

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Analysis error for filter {filter_name}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.post("/compare", response_model=AnalysisResponse)
async def compare_cars(request: ComparisonRequest):
    """üÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω —á–µ—Ä–µ–∑ o3-mini"""
    try:
        service = AnalysisService()
        result = await service.compare_specific_cars(request.car_ids)

        if "error" in result:
            raise HTTPException(status_code=404, detail=result["error"])

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Comparison error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")


@router.get("/quick/{filter_name}", response_model=QuickAnalysisResponse)
async def quick_analysis(filter_name: str):
    """‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ o3-mini –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞"""
    try:
        service = AnalysisService()
        result = await service.get_quick_insight(filter_name)

        if "error" in result:
            raise HTTPException(status_code=404, detail=result["error"])

        return result

    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Quick analysis error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@router.post("/manual-analysis")
async def trigger_manual_analysis(filter_name: str = Query(default=None, description="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –≤—Å–µ")):
    """üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram"""
    try:
        from app.services.monitor_service import MonitorService

        monitor = MonitorService()
        result = await monitor.run_manual_ai_analysis(filter_name)

        return result

    except Exception as e:
        logger.error(f"‚ùå Manual analysis error: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


# üîç –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø

@router.get("/status")
async def get_analysis_status():
    """üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å o3-mini"""
    try:
        from app.services.openai_service import OpenAIService
        from app.repository.car_repository import CarRepository
        from app.database import async_session

        openai_service = OpenAIService()
        connection_test = await openai_service.test_connection()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã
        async with async_session() as session:
            repo = CarRepository(session)
            global_stats = await repo.get_global_statistics()

        cars_in_db = global_stats.get("total_cars", 0)
        analysis_ready = cars_in_db >= 20

        if connection_test.get("status") == "success":
            return {
                "status": "operational",
                "ai_service": "online",
                "model": "o3-mini",
                "database_cars": cars_in_db,
                "analysis_ready": analysis_ready,
                "recommended_endpoint": "/analysis/full-market" if analysis_ready else "/analysis/by-filter",
                "features": [
                    "scheduled_analysis",
                    "full_market_analysis",
                    "market_trends",
                    "database_statistics",
                    "filter_analysis",
                    "car_comparison",
                    "html_reports"
                ],
                "connection_test": "passed"
            }
        else:
            return {
                "status": "degraded",
                "ai_service": "limited",
                "model": "o3-mini",
                "database_cars": cars_in_db,
                "analysis_ready": False,
                "error": connection_test.get("error"),
                "connection_test": "failed"
            }

    except Exception as e:
        logger.error(f"‚ùå Status check failed: {e}")
        return {
            "status": "offline",
            "ai_service": "offline",
            "model": "o3-mini",
            "database_cars": 0,
            "analysis_ready": False,
            "error": str(e)
        }


@router.get("/models")
async def get_available_models():
    """üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
    try:
        from app.services.openai_service import OpenAIService

        openai_service = OpenAIService()
        models = await openai_service.get_available_models()

        return {
            "available_models": models,
            "current_model": "o3-mini",
            "total_models": len(models),
            "optimized_for": "full_database_analysis"
        }

    except Exception as e:
        logger.error(f"‚ùå Models check failed: {e}")
        return {
            "available_models": ["o3-mini"],
            "current_model": "o3-mini",
            "error": str(e)
        }


@router.get("/test-connection")
async def test_openai_connection():
    """üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    try:
        from app.services.openai_service import OpenAIService

        openai_service = OpenAIService()
        result = await openai_service.test_connection()

        return result

    except Exception as e:
        logger.error(f"‚ùå Connection test failed: {e}")
        return {
            "status": "error",
            "model": "o3-mini",
            "error": str(e)
        }


# üéØ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

async def _send_to_telegram_bg(analysis_result: dict, analysis_type: str):
    """Background task –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    try:
        from app.services.telegram_service import TelegramService
        telegram = TelegramService()
        await telegram.send_ai_analysis_report(analysis_result, urgent_mode=False)
        logger.info(f"‚úÖ Background task: {analysis_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå Background task error for {analysis_type}: {e}")


# üìñ –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï ENDPOINTS

@router.get("/help")
async def get_analysis_help():
    """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∞–Ω–∞–ª–∏–∑–∞"""
    return {
        "message": "AI –∞–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
        "new_features": {
            "scheduled_analysis": {
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (09:00 –∏ 18:00)",
                "endpoint": "/analysis/scheduled-analysis",
                "benefits": ["–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Å–¥–µ–ª–æ–∫", "–ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π", "HTML –æ—Ç—á–µ—Ç—ã"]
            },
            "full_market_analysis": {
                "endpoint": "/analysis/full-market",
                "description": "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (—ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤)",
                "benefits": ["–ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Ä—ã–Ω–∫–∞", "–ú–µ–Ω—å—à–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ API", "Comprehensive insights"]
            },
            "market_trends": {
                "endpoint": "/analysis/market-trends",
                "description": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "benefits": ["–î–∏–Ω–∞–º–∏–∫–∞ —Ä—ã–Ω–∫–∞", "–ü—Ä–æ–≥–Ω–æ–∑—ã", "Seasonal patterns"]
            },
            "database_statistics": {
                "endpoint": "/analysis/database-stats",
                "description": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ AI (–±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)",
                "benefits": ["–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ë–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤", "Real-time insights"]
            }
        },
        "scheduled_analysis": {
            "frequency": "2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å",
            "schedule": "09:00 –∏ 18:00 (–ö–∏–ø—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è)",
            "focus": "–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ–ø–∏—Å–∞–Ω–∏–π",
            "outputs": ["HTML –æ—Ç—á–µ—Ç", "–¢–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–Ω—è", "Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
        },
        "migration_guide": {
            "old_way": "–ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ (/analysis/by-filter)",
            "new_way": "–ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã —Å—Ä–∞–∑—É (/analysis/full-market)",
            "scheduled_way": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–¥–µ–ª–æ–∫ (/analysis/scheduled-analysis)",
            "token_savings": "–î–æ 80% —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI",
            "better_insights": "–ë–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Ä—ã–Ω–∫–∞ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"
        },
        "recommended_workflow": [
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: GET /analysis/database-stats",
            "2. –ï—Å–ª–∏ –º–∞—à–∏–Ω >= 20: POST /analysis/full-market",
            "3. –î–ª—è —Ç—Ä–µ–Ω–¥–æ–≤: POST /analysis/market-trends",
            "4. –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫: POST /analysis/scheduled-analysis",
            "5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: GET /analysis/scheduler-status",
            "6. Legacy —Ñ–∏–ª—å—Ç—Ä—ã: POST /analysis/by-filter/{filter_name}"
        ]
    }