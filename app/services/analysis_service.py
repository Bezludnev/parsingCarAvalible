# app/services/analysis_service.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ–π –±–∞–∑—ã
from typing import List, Dict, Any, Optional
from app.services.openai_service import OpenAIService
from app.repository.car_repository import CarRepository
from app.database import async_session
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class AnalysisService:
    def __init__(self):
        self.openai_service = OpenAIService()

    async def analyze_full_database(self, min_cars_per_brand: int = 5) -> Dict[str, Any]:
        """üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        async with async_session() as session:
            repo = CarRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã –∏–∑ –±–∞–∑—ã
            all_cars = await repo.get_all_cars_for_analysis()

            if len(all_cars) < 10:
                return {
                    "success": False,
                    "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—à–∏–Ω –≤ –±–∞–∑–µ: {len(all_cars)}. –ú–∏–Ω–∏–º—É–º: 10",
                    "total_cars_analyzed": len(all_cars)
                }

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±—Ä–µ–Ω–¥–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            brands_stats = self._group_cars_by_brands(all_cars)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –±—Ä–µ–Ω–¥—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—à–∏–Ω
            significant_brands = {
                brand: cars for brand, cars in brands_stats.items()
                if len(cars) >= min_cars_per_brand
            }

            logger.info(f"üéØ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã: {len(all_cars)} –º–∞—à–∏–Ω, "
                        f"{len(significant_brands)} –∑–Ω–∞—á–∏–º—ã—Ö –±—Ä–µ–Ω–¥–æ–≤")

            try:
                # –û–¥–∏–Ω –±–æ–ª—å—à–æ–π AI –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã
                analysis = await self.openai_service.analyze_full_market(
                    all_cars, significant_brands
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                analysis.update({
                    "analysis_type": "full_database",
                    "success": True,
                    "total_cars_analyzed": len(all_cars),
                    "analyzed_brands": list(significant_brands.keys()),
                    "brands_statistics": {
                        brand: len(cars) for brand, cars in significant_brands.items()
                    },
                    "analysis_timestamp": datetime.now().isoformat(),
                    "database_snapshot": True
                })

                return analysis

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                    "total_cars_analyzed": len(all_cars)
                }

    async def analyze_recent_market_trends(self, days: int = 14) -> Dict[str, Any]:
        """üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –±–∞–∑—ã"""
        async with async_session() as session:
            repo = CarRepository(session)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–Ω—è–º
            all_cars = await repo.get_all_cars_for_analysis()
            recent_cars = await repo.get_recent_cars(days, 500)

            if len(all_cars) < 20:
                return {
                    "success": False,
                    "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤",
                    "total_cars_analyzed": len(all_cars)
                }

            logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: {len(all_cars)} –≤—Å–µ–≥–æ, "
                        f"{len(recent_cars)} –∑–∞ {days} –¥–Ω–µ–π")

            try:
                # AI –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
                analysis = await self.openai_service.analyze_market_trends(
                    all_cars, recent_cars, days
                )

                analysis.update({
                    "analysis_type": "market_trends",
                    "success": True,
                    "total_cars_analyzed": len(all_cars),
                    "recent_cars_count": len(recent_cars),
                    "trends_period_days": days,
                    "analysis_timestamp": datetime.now().isoformat()
                })

                return analysis

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {str(e)}",
                    "total_cars_analyzed": len(all_cars)
                }

    async def get_market_insights_summary(self) -> Dict[str, Any]:
        """‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º—É —Ä—ã–Ω–∫—É (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)"""
        async with async_session() as session:
            repo = CarRepository(session)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–π –±–∞–∑–µ
            total_stats = await repo.get_global_statistics()
            recent_stats = await repo.get_recent_statistics(7)
            brands_breakdown = await repo.get_brands_breakdown()

            return {
                "success": True,
                "analysis_type": "market_summary",
                "total_cars_in_db": total_stats.get("total_cars", 0),
                "avg_price": total_stats.get("avg_price"),
                "avg_year": total_stats.get("avg_year"),
                "avg_mileage": total_stats.get("avg_mileage"),
                "recent_week_additions": recent_stats.get("new_cars_count", 0),
                "brands_breakdown": brands_breakdown,
                "most_popular_brand": max(brands_breakdown.items(), key=lambda x: x[1])[
                    0] if brands_breakdown else None,
                "analysis_timestamp": datetime.now().isoformat()
            }

    def _group_cars_by_brands(self, cars: List) -> Dict[str, List]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–∞—à–∏–Ω—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º"""
        brands = {}
        for car in cars:
            brand = car.brand or "Unknown"
            if brand not in brands:
                brands[brand] = []
            brands[brand].append(car)
        return brands

    # LEGACY –º–µ—Ç–æ–¥—ã –¥–ª—è backward compatibility
    async def analyze_cars_by_filter(self, filter_name: str, limit: int = 20) -> Dict[str, Any]:
        """Legacy: –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (—Ç–µ–ø–µ—Ä—å –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã)"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_filter(filter_name, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}",
                    "total_cars_analyzed": 0
                }

            logger.info(f"üìä Legacy –∞–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {len(cars)} –º–∞—à–∏–Ω")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ OpenAI
            analysis = await self.openai_service.analyze_cars(cars)
            analysis.update({
                "filter_name": filter_name,
                "analysis_type": "by_filter_legacy",
                "success": True
            })

            return analysis

    async def compare_specific_cars(self, car_ids: List[int]) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω –ø–æ ID"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_ids(car_ids)

            if not cars:
                return {
                    "success": False,
                    "error": "–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "total_cars_analyzed": 0
                }

            logger.info(f"üÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {len(cars)} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω")
            analysis = await self.openai_service.analyze_cars(cars)
            analysis.update({
                "compared_car_ids": car_ids,
                "analysis_type": "comparison",
                "success": True
            })

            return analysis

    async def get_quick_insight(self, filter_name: str, limit: int = 5) -> Dict[str, Any]:
        """üöÄ –ë—ã—Å—Ç—Ä—ã–π insight (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_filter(filter_name, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è {filter_name}",
                    "filter_name": filter_name,
                    "total_cars": 0
                }

            try:
                quick_rec = await self.openai_service.get_quick_recommendation(cars)

                # –ò—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É
                import re
                recommended_link = None
                match = re.search(r"#(\d+)", quick_rec)
                if match:
                    try:
                        idx = int(match.group(1)) - 1
                        if 0 <= idx < len(cars):
                            recommended_link = cars[idx].link
                    except Exception:
                        pass

                return {
                    "success": True,
                    "filter_name": filter_name,
                    "total_cars": len(cars),
                    "quick_recommendation": quick_rec,
                    "recommended_link": recommended_link,
                    "analysis_type": "quick_insight"
                }

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                    "filter_name": filter_name,
                    "total_cars": len(cars)
                }