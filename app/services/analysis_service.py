# app/services/analysis_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å quick insights
from typing import List, Dict, Any, Optional
from app.services.openai_service import OpenAIService
from app.repository.car_repository import CarRepository
from app.database import async_session
import logging
import re

logger = logging.getLogger(__name__)


class AnalysisService:
    def __init__(self):
        self.openai_service = OpenAIService()

    async def analyze_cars_by_filter(self, filter_name: str, limit: int = 20) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—à–∏–Ω—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_filter(filter_name, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}",
                    "total_cars_analyzed": 0
                }

            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(cars)} –º–∞—à–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}")
            analysis = await self.openai_service.analyze_cars(cars)

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            analysis["filter_name"] = filter_name
            analysis["analysis_type"] = "by_filter"
            analysis["success"] = True

            return analysis

    async def analyze_recent_cars(self, days: int = 7, limit: int = 30) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–¥–∞–≤–Ω–∏–µ –º–∞—à–∏–Ω—ã"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_recent_cars(days, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π",
                    "total_cars_analyzed": 0
                }

            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(cars)} –º–∞—à–∏–Ω –∑–∞ {days} –¥–Ω–µ–π")
            analysis = await self.openai_service.analyze_cars(cars)

            analysis["days_period"] = days
            analysis["analysis_type"] = "recent_cars"
            analysis["success"] = True

            return analysis

    async def compare_specific_cars(self, car_ids: List[int]) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ ID"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_ids(car_ids)

            if not cars:
                return {
                    "success": False,
                    "error": "–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    "total_cars_analyzed": 0
                }

            logger.info(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {len(cars)} –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—à–∏–Ω")
            analysis = await self.openai_service.analyze_cars(cars)

            analysis["compared_car_ids"] = car_ids
            analysis["analysis_type"] = "comparison"
            analysis["success"] = True

            return analysis

    async def get_brand_analysis(self, brand: str, limit: int = 15) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ä–∫–µ"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_brand(brand, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –º–∞—Ä–∫–∏ {brand}",
                    "total_cars_analyzed": 0
                }

            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(cars)} –º–∞—à–∏–Ω –º–∞—Ä–∫–∏ {brand}")
            analysis = await self.openai_service.analyze_cars(cars)

            analysis["brand"] = brand
            analysis["analysis_type"] = "by_brand"
            analysis["success"] = True

            return analysis

    async def get_quick_insight(self, filter_name: str, limit: int = 5) -> Dict[str, Any]:
        """üöÄ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞)"""
        async with async_session() as session:
            repo = CarRepository(session)
            cars = await repo.get_cars_by_filter(filter_name, limit)

            if not cars:
                return {
                    "success": False,
                    "error": f"–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è {filter_name}",
                    "filter_name": filter_name,
                    "total_cars": 0
                }

            try:
                logger.info(f"–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ {len(cars)} –º–∞—à–∏–Ω –¥–ª—è {filter_name}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ OpenAI service
                quick_rec = await self.openai_service.get_quick_recommendation(cars)

                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
                recommended_link = None
                match = re.search(r"#(\d+)", quick_rec)
                if match:
                    try:
                        idx = int(match.group(1)) - 1
                        if 0 <= idx < len(cars):
                            recommended_link = cars[idx].link
                    except Exception:
                        recommended_link = None

                return {
                    "success": True,
                    "filter_name": filter_name,
                    "total_cars": len(cars),
                    "quick_recommendation": quick_rec,
                    "recommended_link": recommended_link,
                    "analysis_type": "quick_insight"
                }

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                    "filter_name": filter_name,
                    "total_cars": len(cars)
                }

    async def get_filter_statistics(self, filter_name: str) -> Dict[str, Any]:
        """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        async with async_session() as session:
            repo = CarRepository(session)

            stats = await repo.get_price_statistics(filter_name)
            recent_cars = await repo.get_recent_cars(7, 50)  # –ó–∞ –Ω–µ–¥–µ–ª—é
            filter_cars = [car for car in recent_cars if car.filter_name == filter_name]

            return {
                "filter_name": filter_name,
                "total_cars": stats.get("total_cars", 0),
                "avg_year": stats.get("avg_year"),
                "avg_mileage": stats.get("avg_mileage"),
                "recent_week": len(filter_cars),
                "cars_per_day": round(len(filter_cars) / 7, 1) if filter_cars else 0
            }

    async def batch_quick_analysis(self, filter_names: List[str]) -> List[Dict[str, Any]]:
        """üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        results = []

        for filter_name in filter_names:
            try:
                result = await self.get_quick_insight(filter_name, 8)
                results.append(result)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                results.append({
                    "success": False,
                    "filter_name": filter_name,
                    "error": str(e),
                    "total_cars": 0
                })

        return results