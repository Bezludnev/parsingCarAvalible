# app/services/telegram_service.py - –° SCHEDULED –ê–ù–ê–õ–ò–ó–û–ú
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.types import FSInputFile
from app.config import settings
from app.models.car import Car
from app.services.html_service import HTMLReportService
from typing import Dict, Any, List, Optional
from datetime import datetime
import logging
import os

logger = logging.getLogger(__name__)


class TelegramService:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.html_service = HTMLReportService()
        self.MAX_MESSAGE_LENGTH = 4000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è Telegram

    async def send_new_car_notification(self, car: Car, urgent: bool = False, urgent_filter: bool = False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ"""
        message = self._format_car_message(car, urgent, urgent_filter)
        try:
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )
            urgent_status = "üî• URGENT" if urgent or urgent_filter else "–æ–±—ã—á–Ω–æ–µ"
            logger.info(f"‚úÖ {urgent_status} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—à–∏–Ω—ã ID: {car.id}")
        except TelegramAPIError as e:
            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise

    async def send_scheduled_analysis_report(self, analysis_result: Dict[str, Any]):
        """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç scheduled AI –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not analysis_result.get("success", True):
                await self._send_error_notification(f"Scheduled –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {analysis_result.get('error')}")
                return

            # –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
            html_file_path = self.html_service.generate_analysis_report(analysis_result)
            report_filename = os.path.basename(html_file_path)

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è scheduled –∞–Ω–∞–ª–∏–∑–∞
            current_time = datetime.now().strftime("%H:%M")
            total_cars = analysis_result.get("total_cars_analyzed", 0)
            recommended_count = len(analysis_result.get("recommended_car_ids", []))
            brands_count = len(analysis_result.get("brands_analyzed", []))

            message = f"""ü§ñ <b>SCHEDULED AI –ê–ù–ê–õ–ò–ó</b> ‚Ä¢ {current_time}

üìä <b>–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</b>
üöó –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_cars} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: {brands_count}
‚≠ê –õ—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {recommended_count}

üí° <b>–ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã:</b>
{self._extract_short_conclusions(analysis_result.get("general_conclusions", ""))[:300]}

üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</b> <code>{report_filename}</code>
üìé <i>HTML —Ñ–∞–π–ª —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º</i>

üîç <i>–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑: –≤ {'09:00' if datetime.now().hour >= 18 else '18:00'}</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª
            try:
                html_file = FSInputFile(html_file_path, filename=report_filename)
                await self.bot.send_document(
                    chat_id=settings.telegram_chat_id,
                    document=html_file,
                    caption=f"üìä Scheduled –∞–Ω–∞–ª–∏–∑ ‚Ä¢ {total_cars} –º–∞—à–∏–Ω ‚Ä¢ {recommended_count} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
                )
                logger.info(f"‚úÖ Scheduled –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {report_filename}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ scheduled HTML: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ scheduled –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self._send_error_notification(f"–û—à–∏–±–∫–∞ scheduled –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    async def send_top_deals_notification(self, analysis_result: Dict[str, Any], recommended_ids: List[int]):
        """üíé –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–ø–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö"""
        try:
            if not recommended_ids:
                return

            cars_data = analysis_result.get("cars_data", [])
            recommended_cars = [car for car in cars_data if car.get("id") in recommended_ids]

            if not recommended_cars:
                return

            message = f"""üíé <b>–¢–û–ü –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –î–ù–Ø</b>

üéØ <b>–ù–∞–π–¥–µ–Ω–æ {len(recommended_cars)} –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b>

"""

            for i, car in enumerate(recommended_cars[:5], 1):  # –¢–æ–ø-5
                car_id = car.get("id")
                title = car.get("title", "")[:50] + ("..." if len(car.get("title", "")) > 50 else "")
                brand = car.get("brand", "")
                year = car.get("year", "")
                price = car.get("price", "")
                mileage = car.get("mileage")
                link = car.get("link", "")

                # –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                description = car.get("description", "")
                deal_indicators = self._extract_deal_indicators(description)

                mileage_text = f"{mileage:,} –∫–º" if mileage else "–Ω/–¥"

                message += f"""<b>{i}. {brand} {year}</b>
üìù {title}
üí∞ {price} ‚Ä¢ üõ£ {mileage_text}
{deal_indicators}
üîó <a href="{link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>

"""

            message += f"""
ü§ñ <i>–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏</i>
‚è∞ <i>–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )

            logger.info(f"‚úÖ –¢–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(recommended_cars)} –º–∞—à–∏–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")

    def _extract_deal_indicators(self, description: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        if not description:
            return "üìã <i>–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è</i>"

        indicators = []
        desc_lower = description.lower()

        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if any(word in desc_lower for word in ["—Å—Ä–æ—á–Ω–æ", "urgent", "–ø–µ—Ä–µ–µ–∑–¥", "–±—ã—Å—Ç—Ä–æ"]):
            indicators.append("üî• —Å—Ä–æ—á–Ω–æ")
        if any(word in desc_lower for word in ["–æ—Ç–ª–∏—á–Ω–æ–µ", "–∏–¥–µ–∞–ª—å–Ω–æ–µ", "perfect", "excellent"]):
            indicators.append("‚ú® –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        if any(word in desc_lower for word in ["—Å–µ—Ä–≤–∏—Å", "—Ç–æ", "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "service"]):
            indicators.append("üîß —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
        if any(word in desc_lower for word in ["–æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü", "one owner", "–ø–µ—Ä–≤—ã–π"]):
            indicators.append("üë§ –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü")
        if any(word in desc_lower for word in ["—Å–Ω–∏–∂–µ–Ω–∞", "—Å–∫–∏–¥–∫–∞", "reduced", "discount"]):
            indicators.append("üí∏ —Å–Ω–∏–∂–µ–Ω–∞ —Ü–µ–Ω–∞")

        if indicators:
            return "üí° " + " ‚Ä¢ ".join(indicators[:3])  # –ú–∞–∫—Å–∏–º—É–º 3 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–∏—Å–∞–Ω–∏—è
            desc_short = description[:80] + "..." if len(description) > 80 else description
            return f"üìù <i>{desc_short}</i>"

    async def send_ai_analysis_report(self, analysis_result: Dict[str, Any], urgent_mode: bool = False):
        """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑: –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É + HTML –æ—Ç—á–µ—Ç"""
        try:
            if not analysis_result.get("success", True):
                error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞</b>\n\n{analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=error_message,
                    parse_mode=ParseMode.HTML
                )
                return

            # 1. –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
            html_file_path = self.html_service.generate_analysis_report(analysis_result)
            report_filename = os.path.basename(html_file_path)

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É
            summary_message = self._create_analysis_summary(analysis_result, report_filename, urgent_mode)

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=summary_message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            try:
                html_file = FSInputFile(html_file_path, filename=report_filename)
                await self.bot.send_document(
                    chat_id=settings.telegram_chat_id,
                    document=html_file,
                    caption=f"üìÑ –ü–æ–ª–Ω—ã–π AI –æ—Ç—á–µ—Ç ‚Ä¢ {analysis_result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω"
                )
                logger.info(f"‚úÖ HTML –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {report_filename}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Ñ–∞–π–ª–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: <code>{report_filename}</code>\n"
                         f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram.",
                    parse_mode=ParseMode.HTML
                )

            logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {analysis_result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self._send_error_notification(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

    def _create_analysis_summary(self, analysis_result: Dict[str, Any], report_filename: str,
                                 urgent_mode: bool = False) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –¥–ª—è Telegram (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞)"""

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
        total_cars = analysis_result.get("total_cars_analyzed", 0)
        model_used = analysis_result.get("model_used", "AI")
        recommended_ids = analysis_result.get("recommended_car_ids", [])

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        urgent_emoji = "üî•üî• " if urgent_mode else ""
        urgent_text = "URGENT " if urgent_mode else ""

        message = f"""{urgent_emoji}ü§ñ <b>{urgent_text}AI –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù</b>

üìä <b>–§–∏–ª—å—Ç—Ä:</b> {filter_name.title()} {'(üî• URGENT —Ä–µ–∂–∏–º)' if urgent_mode else ''}
üöó <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</b> {total_cars} –º–∞—à–∏–Ω
‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> {len(recommended_ids)} –º–∞—à–∏–Ω
üß† <b>–ú–æ–¥–µ–ª—å:</b> {model_used}

"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        top_recommendations = analysis_result.get("top_recommendations", "")
        if top_recommendations:
            short_recs = self._extract_short_recommendations(top_recommendations)
            message += f"üèÜ <b>–¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n{short_recs}\n\n"

        # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        conclusions = analysis_result.get("general_conclusions", "")
        if conclusions:
            short_conclusions = self._extract_short_conclusions(conclusions)
            message += f"üìù <b>–í–´–í–û–î–´:</b>\n{short_conclusions}\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID
        if recommended_ids:
            ids_str = ", ".join(str(id_) for id_ in recommended_ids[:8])  # –ú–∞–∫—Å–∏–º—É–º 8 ID
            if len(recommended_ids) > 8:
                ids_str += f" (+{len(recommended_ids) - 8} –µ—â–µ)"
            message += f"‚≠ê <b>ID —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö:</b> {ids_str}\n\n"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        message += f"üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</b> <code>{report_filename}</code>\n"
        message += f"üìé <i>HTML —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(message) > self.MAX_MESSAGE_LENGTH:
            message = message[
                      :self.MAX_MESSAGE_LENGTH - 100] + f"...\n\nüìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</b> <code>{report_filename}</code>"

        return message

    def _extract_short_recommendations(self, recommendations: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ø-3)"""

        lines = [line.strip() for line in recommendations.split('\n') if line.strip()]

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        rec_lines = []
        count = 0

        for line in lines:
            if line and not line.startswith('‚îÄ') and count < 3:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                if any(char.isdigit() for char in line[:5]):  # –≠—Ç–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                    short_line = line[:80] + "..." if len(line) > 80 else line
                    rec_lines.append(short_line)
                    count += 1

        return '\n'.join(rec_lines) if rec_lines else "–°–º. –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"

    def _extract_short_conclusions(self, conclusions: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"""

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = [s.strip() for s in conclusions.replace('\n', ' ').split('.') if s.strip()]

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        short_sentences = sentences[:3]
        short_text = '. '.join(short_sentences)

        if len(short_text) > 300:
            short_text = short_text[:300] + "..."

        return short_text + "." if short_text and not short_text.endswith('.') else short_text

    async def send_quick_analysis_notification(self, analysis_result: Dict[str, Any], urgent_mode: bool = False):
        """‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            if not analysis_result.get("success", True):
                return

            filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
            total_cars = analysis_result.get("total_cars", 0)
            quick_rec = analysis_result.get("quick_recommendation", "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            rec_link = analysis_result.get("recommended_link")

            # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if len(quick_rec) > 200:
                quick_rec = quick_rec[:200] + "..."

            urgent_emoji = "üî•‚ö° " if urgent_mode else "‚ö° "
            urgent_text = "URGENT " if urgent_mode else ""

            message = f"""{urgent_emoji}<b>{urgent_text}–ë—ã—Å—Ç—Ä—ã–π AI –∞–Ω–∞–ª–∏–∑</b>

üéØ <b>–§–∏–ª—å—Ç—Ä:</b> {filter_name.title()} {'(üî• URGENT)' if urgent_mode else ''}
üìä <b>–ú–∞—à–∏–Ω:</b> {total_cars}

ü§ñ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
{quick_rec}
"""

            if rec_link:
                message += f"\nüîó <a href=\"{rec_link}\">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>"

            message += """

üí° <i>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filter_name} {'(URGENT)' if urgent_mode else ''}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def send_urgent_summary(self, urgent_stats: Dict[str, int]):
        """üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ urgent —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            total_urgent = sum(urgent_stats.values())

            if total_urgent == 0:
                return

            message = f"""üî•üî• <b>URGENT –°–í–û–î–ö–ê</b> üî•üî•

üö® <b>–ù–∞–π–¥–µ–Ω–æ {total_urgent} —Å—Ä–æ—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π!</b>

"""

            for filter_name, count in urgent_stats.items():
                if count > 0:
                    message += f"üî• <b>{filter_name}:</b> {count} –º–∞—à–∏–Ω\n"

            message += f"""

‚ö° <i>AI –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>
üîó <i>–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–ª–µ–¥—É—é—Ç...</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"üî• Urgent —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {total_urgent} –º–∞—à–∏–Ω –∏–∑ {len(urgent_stats)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ urgent —Å–≤–æ–¥–∫–∏: {e}")

    async def send_analysis_summary(self, summaries: List[Dict[str, Any]]):
        """üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            message = "üìä <b>–°–í–û–î–ö–ê AI –ê–ù–ê–õ–ò–ó–ê</b>\n\n"

            total_reports = 0
            urgent_count = 0

            for summary in summaries:
                filter_name = summary.get("filter_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                total_cars = summary.get("total_cars", 0)
                success = summary.get("success", False)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ urgent —Ñ–∏–ª—å—Ç—Ä
                filter_config = settings.car_filters.get(filter_name, {})
                is_urgent = filter_config.get("urgent_mode", False)

                status_emoji = "‚úÖ" if success else "‚ùå"
                urgent_emoji = " üî•" if is_urgent else ""

                message += f"{status_emoji} <b>{filter_name.title()}{urgent_emoji}:</b> {total_cars} –º–∞—à–∏–Ω\n"

                if success:
                    total_reports += 1
                    if is_urgent:
                        urgent_count += 1
                    quick_rec = summary.get("quick_recommendation", "")
                    if quick_rec:
                        rec_short = quick_rec[:60] + "..." if len(quick_rec) > 60 else quick_rec
                        message += f"   üí° {rec_short}\n"

                message += "\n"

            message += f"üìÑ <b>–°–æ–∑–¥–∞–Ω–æ HTML –æ—Ç—á–µ—Ç–æ–≤:</b> {total_reports}\n"
            if urgent_count > 0:
                message += f"üî• <b>Urgent –æ—Ç—á–µ—Ç–æ–≤:</b> {urgent_count}\n"
            message += "<i>ü§ñ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</i>"

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(
                f"‚úÖ –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {len(summaries)} —Ñ–∏–ª—å—Ç—Ä–æ–≤, {total_reports} –æ—Ç—á–µ—Ç–æ–≤, {urgent_count} urgent")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")

    async def send_reports_list(self):
        """üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö HTML –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            reports = self.html_service.get_reports_list(10)

            if not reports:
                message = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"
            else:
                message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ HTML –æ—Ç—á–µ—Ç—ã</b>\n\n"

                for i, report in enumerate(reports, 1):
                    filename = report["filename"]
                    size = report["size_mb"]
                    created = report["created"]

                    message += f"{i}. <code>{filename}</code>\n"
                    message += f"   üìÖ {created} ‚Ä¢ {size} MB\n\n"

                if len(reports) == 10:
                    message += "<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤</i>"

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

    async def send_error_notification(self, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (public –º–µ—Ç–æ–¥)"""
        await self._send_error_notification(error_text)

    async def _send_error_notification(self, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n{error_text}"
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _format_car_message(self, car: Car, urgent: bool = False, urgent_filter: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç urgent —Å—Ç–∞—Ç—É—Å–∞
        if urgent and urgent_filter:
            header = "üî•üî• <b>DOUBLE URGENT!</b> "
        elif urgent_filter:
            header = "üî• <b>URGENT –§–ò–õ–¨–¢–†!</b> "
        elif urgent:
            header = "üî• <b>–°–†–û–ß–ù–û!</b> "
        else:
            header = ""

        filter_suffix = f" (—Ñ–∏–ª—å—Ç—Ä: {car.filter_name})" if urgent_filter else ""

        return f"""
{header}üöó <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - {car.brand}</b>{filter_suffix}

üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {car.title}
üí∞ <b>–¶–µ–Ω–∞:</b> {car.price}
üìÖ <b>–ì–æ–¥:</b> {car.year or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üõ£ <b>–ü—Ä–æ–±–µ–≥:</b> {f"{car.mileage:,} –∫–º" if car.mileage else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üìç <b>–ú–µ—Å—Ç–æ:</b> {car.place}
üìÜ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {car.date_posted}

üîó <a href="{car.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>

‚öôÔ∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> {car.features}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {car.description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
        """.strip()

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ Telegram –±–æ—Ç–∞"""
        try:
            if hasattr(self.bot, 'session') and self.bot.session:
                await self.bot.session.close()
                logger.info("‚úÖ Telegram bot session –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram session: {e}")

    # üÜï –ú–ï–¢–û–î–´ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•

        async def send_car_changes_notification(self, car, changes: Dict[str, Any]):
            """üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
            logger.info(f"üì± send_car_changes_notification() called for car {car.id}")

            try:
                price_changed = changes.get("price_changed", False)
                description_changed = changes.get("description_changed", False)

                logger.info(
                    f"üìä Changes summary for car {car.id}: price={price_changed}, description={description_changed}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                if price_changed and description_changed:
                    header = "üîÑüí∞üìù <b>–ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –û–ë–™–Ø–í–õ–ï–ù–ò–ò</b>"
                elif price_changed:
                    header = "üîÑüí∞ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´</b>"
                elif description_changed:
                    header = "üîÑüìù <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø</b>"
                else:
                    logger.warning(f"‚ö†Ô∏è No changes detected for car {car.id} - skipping notification")
                    return  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

                message = f"""{header}

    üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> {car.brand} {car.year or ''}
    üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {car.title[:60]}{'...' if len(car.title) > 60 else ''}
    üÜî <b>ID:</b> {car.id}

    """

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
                if price_changed:
                    old_price = changes.get("old_price", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    new_price = changes.get("new_price", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                    logger.info(f"üí∞ Price change details for car {car.id}: '{old_price}' ‚Üí '{new_price}'")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                    price_direction = self._analyze_price_change(old_price, new_price)

                    message += f"""üí∞ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´:</b>
    üìä –ë—ã–ª–æ: {old_price}
    üìä –°—Ç–∞–ª–æ: {new_price}
    {price_direction}

    """

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
                if description_changed:
                    old_desc = changes.get("old_description", "")
                    new_desc = changes.get("new_description", "")

                    logger.info(f"üìù Description change details for car {car.id}: "
                                f"{len(old_desc)} chars ‚Üí {len(new_desc)} chars")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                    old_desc_short = (old_desc[:100] + "...") if len(old_desc) > 100 else old_desc
                    new_desc_short = (new_desc[:100] + "...") if len(new_desc) > 100 else new_desc

                    message += f"""üìù <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø:</b>
    üìÑ –ë—ã–ª–æ: "{old_desc_short or '–ø—É—Å—Ç–æ–µ'}"
    üìÑ –°—Ç–∞–ª–æ: "{new_desc_short or '–ø—É—Å—Ç–æ–µ'}"

    """

                message += f"""üîó <a href="{car.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>

    ‚è∞ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"""

                logger.debug(f"üì± Sending change notification message for car {car.id} ({len(message)} chars)")

                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=False
                )

                logger.info(f"‚úÖ Changes notification sent successfully for car {car.id}")

            except Exception as e:
                logger.error(f"‚ùå Error sending changes notification for car {car.id}: {str(e)}")
                logger.debug(f"üîç Exception details: {type(e).__name__}: {str(e)}")

        async def send_daily_changes_summary(self, summary: Dict[str, Any]):
            """üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
            logger.info("üìä send_daily_changes_summary() called")

            try:
                total_checked = summary.get("total_checked", 0)
                total_changes = summary.get("total_changes", 0)
                price_changes = summary.get("price_changes", 0)
                description_changes = summary.get("description_changes", 0)
                unavailable_count = summary.get("unavailable_count", 0)
                error_count = summary.get("error_count", 0)
                elapsed_seconds = summary.get("elapsed_seconds", 0)

                logger.info(f"üìä Summary stats: {total_checked} checked, {total_changes} changes, "
                            f"{price_changes} price, {description_changes} desc, "
                            f"{unavailable_count} unavailable, {error_count} errors, {elapsed_seconds:.1f}s")

                if total_changes == 0 and unavailable_count == 0 and error_count == 0:
                    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
                    message = f"""üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π</b>

    ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_checked} –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    üò¥ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {unavailable_count}
    ‚è±Ô∏è –í—Ä–µ–º—è: {elapsed_seconds:.1f}—Å

    ‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
                    logger.info("üì± Sending brief summary (no changes)")
                else:
                    # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
                    message = f"""üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô</b>

    üîç <b>–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b> {total_checked}
    üîÑ <b>–ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b> {total_changes}

    """
                    if price_changes > 0:
                        message += f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω: {price_changes}\n"
                    if description_changes > 0:
                        message += f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π: {description_changes}\n"
                    if unavailable_count > 0:
                        message += f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö/–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö: {unavailable_count}\n"
                    if error_count > 0:
                        message += f"‚ö†Ô∏è –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {error_count}\n"

                    success_rate = ((total_checked - error_count) / total_checked * 100) if total_checked > 0 else 0
                    message += f"""
    üìà <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    ‚è±Ô∏è <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {elapsed_seconds:.1f} —Å–µ–∫—É–Ω–¥

    ‚è∞ <i>–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è</i>
    üïê <i>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}</i>"""
                    logger.info("üì± Sending detailed summary (with changes)")

                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML
                )

                logger.info(
                    f"‚úÖ Daily changes summary sent successfully: {total_changes} changes in {total_checked} cars")

            except Exception as e:
                logger.error(f"‚ùå Error sending daily changes summary: {str(e)}")
                logger.debug(f"üîç Exception details: {type(e).__name__}: {str(e)}")

        async def send_price_drops_alert(self, cars_with_drops: List, min_drop: int):
            """üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
            if not cars_with_drops:
                return

            try:
                message = f"""üí∏üí∏ <b>–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–î–ï–ù–ò–Ø –¶–ï–ù!</b> üí∏üí∏

    üéØ –ù–∞–π–¥–µ–Ω–æ {len(cars_with_drops)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –Ω–∞ {min_drop}‚Ç¨+

    """

                for i, car in enumerate(cars_with_drops[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                    old_price_num = self._extract_price_number(car.previous_price)
                    new_price_num = self._extract_price_number(car.price)

                    if old_price_num and new_price_num:
                        drop_amount = old_price_num - new_price_num
                        drop_percent = (drop_amount / old_price_num) * 100

                        message += f"""<b>{i}. {car.brand} {car.year or ''}</b>
    üìù {car.title[:50]}{'...' if len(car.title) > 50 else ''}
    üí∞ –ë—ã–ª–æ: {car.previous_price} ‚Üí –°—Ç–∞–ª–æ: {car.price}
    üìâ –°–Ω–∏–∂–µ–Ω–∏–µ: -{drop_amount:,}‚Ç¨ ({drop_percent:.1f}%)
    üîó <a href="{car.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</a>

    """

                if len(cars_with_drops) > 5:
                    message += f"<i>... –∏ –µ—â–µ {len(cars_with_drops) - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</i>\n\n"

                message += "üèÉ‚Äç‚ôÇÔ∏è <i>–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ —Ç–æ—Ä–≥!</i>"

                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=message,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=False
                )

                logger.info(f"üö® Price drops alert sent: {len(cars_with_drops)} cars with significant drops")

            except Exception as e:
                logger.error(f"‚ùå Error sending price drops alert: {e}")

        def _analyze_price_change(self, old_price: str, new_price: str) -> str:
            """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ + –æ–ø–∏—Å–∞–Ω–∏–µ"""
            try:
                old_num = self._extract_price_number(old_price)
                new_num = self._extract_price_number(new_price)

                if not old_num or not new_num:
                    return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã"

                diff = new_num - old_num
                percent_change = (diff / old_num) * 100

                if diff > 0:
                    if percent_change > 10:
                        return f"üìà –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ (+{diff:,}‚Ç¨, +{percent_change:.1f}%)"
                    else:
                        return f"üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ (+{diff:,}‚Ç¨, +{percent_change:.1f}%)"
                elif diff < 0:
                    if abs(percent_change) > 10:
                        return f"üìâ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ ({diff:,}‚Ç¨, {percent_change:.1f}%) üéØ"
                    else:
                        return f"üìâ –°–Ω–∏–∂–µ–Ω–∏–µ ({diff:,}‚Ç¨, {percent_change:.1f}%)"
                else:
                    return "üîÑ –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç)"

            except Exception:
                return "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã"

        def _extract_price_number(self, price_text: str) -> Optional[int]:
            """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ü–µ–Ω—ã"""
            import re
            if not price_text:
                return None

            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
            numbers = re.findall(r'\d+', price_text.replace(',', '').replace(' ', ''))
            if numbers:
                try:
                    return int(''.join(numbers))
                except:
                    return None
            return None
