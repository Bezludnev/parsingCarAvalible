# app/services/telegram_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from app.config import settings
from app.models.car import Car
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)


class TelegramService:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)

    async def send_new_car_notification(self, car: Car):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ"""
        message = self._format_car_message(car)
        try:
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—à–∏–Ω—ã ID: {car.id}")
        except TelegramAPIError as e:
            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise

    async def send_ai_analysis_report(self, analysis_result: Dict[str, Any]):
        """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ Telegram"""
        try:
            if not analysis_result.get("success", True):
                error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞</b>\n\n{analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=error_message,
                    parse_mode=ParseMode.HTML
                )
                return

            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
            main_message = self._format_ai_analysis_message(analysis_result)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=main_message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            detailed_analysis = analysis_result.get("detailed_analysis", "")
            if len(detailed_analysis) > 500:
                details_message = self._format_detailed_analysis_message(analysis_result)
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=details_message,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )

            logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {analysis_result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω")

        except TelegramAPIError as e:
            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise

    def _format_ai_analysis_message(self, analysis_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º"""

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
        total_cars = analysis_result.get("total_cars_analyzed", 0)

        message = f"""ü§ñ <b>AI –ê–ù–ê–õ–ò–ó –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô</b>

üìä <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</b> {total_cars} –º–∞—à–∏–Ω ({filter_name.title()})
üéØ <b>–ú–æ–¥–µ–ª—å:</b> o3-mini
‚è± <b>–í—Ä–µ–º—è:</b> {self._format_timestamp(analysis_result.get("analysis_timestamp"))}

"""

        # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ)
        top_recommendations = analysis_result.get("top_recommendations", "")
        if top_recommendations:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            rec_lines = [line.strip() for line in top_recommendations.split('\n') if line.strip()]
            top_3 = rec_lines[:4]  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

            message += f"üèÜ <b>–¢–û–ü-3 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n"
            for line in top_3[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if line and not line.startswith('‚îÄ'):
                    message += f"{line}\n"
            message += "\n"

        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        conclusions = analysis_result.get("general_conclusions", "")
        if conclusions:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∞–±–∑–∞—Ü–∞ –≤—ã–≤–æ–¥–æ–≤
            conclusion_lines = conclusions.split('\n\n')[:2]
            short_conclusions = '\n\n'.join(conclusion_lines)

            if len(short_conclusions) > 400:
                short_conclusions = short_conclusions[:400] + "..."

            message += f"üìù <b>–ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´:</b>\n{short_conclusions}\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID –º–∞—à–∏–Ω
        recommended_ids = analysis_result.get("recommended_car_ids", [])
        if recommended_ids:
            message += f"‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID:</b> {', '.join(map(str, recommended_ids))}\n\n"

        # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        message += f"<i>üí° –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"

        return message

    def _format_detailed_analysis_message(self, analysis_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã"""

        detailed_analysis = analysis_result.get("detailed_analysis", "")

        if not detailed_analysis:
            return "üìã <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>"

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞—à–∏–Ω—ã –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
        sections = detailed_analysis.split("–ê–≤—Ç–æ–º–æ–±–∏–ª—å #")

        message = "üìã <b>–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ú–ê–®–ò–ù–ê–ú:</b>\n\n"

        for i, section in enumerate(sections[1:6], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∞—à–∏–Ω
            if section.strip():
                lines = section.split('\n')
                title_line = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å #{lines[0]}" if lines else f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å #{i}"

                # –ò—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                recommendation = ""
                for line in lines:
                    if "üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:" in line:
                        recommendation = line.replace("üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", "").strip()
                        break

                # –ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã
                price_assessment = ""
                for line in lines:
                    if "üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã:" in line:
                        price_assessment = line.replace("üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã:", "").strip()[:100]
                        break

                message += f"<b>{title_line}</b>\n"
                if price_assessment:
                    message += f"üí∞ {price_assessment}\n"
                if recommendation:
                    message += f"üìä <b>{recommendation}</b>\n"
                message += "\n"

        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
        if len(message) > 4000:
            message = message[:3900] + "...\n\n<i>–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API</i>"

        return message

    def _format_car_message(self, car: Car) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥)"""
        return f"""
üöó <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - {car.brand}</b>

üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {car.title}
üí∞ <b>–¶–µ–Ω–∞:</b> {car.price}
üìÖ <b>–ì–æ–¥:</b> {car.year or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üõ£ <b>–ü—Ä–æ–±–µ–≥:</b> {f"{car.mileage:,} –∫–º" if car.mileage else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üìç <b>–ú–µ—Å—Ç–æ:</b> {car.place}
üìÜ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {car.date_posted}

üîó <a href="{car.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>

‚öôÔ∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> {car.features}
        """.strip()

    def _format_timestamp(self, timestamp_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not timestamp_str:
            return "–Ω–µ–¥–∞–≤–Ω–æ"

        try:
            from datetime import datetime
            dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return "–Ω–µ–¥–∞–≤–Ω–æ"

    async def send_quick_analysis_notification(self, analysis_result: Dict[str, Any]):
        """üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            if not analysis_result.get("success", True):
                return

            filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
            total_cars = analysis_result.get("total_cars", 0)
            quick_rec = analysis_result.get("quick_recommendation", "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

            message = f"""‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π AI –∞–Ω–∞–ª–∏–∑</b>

üéØ <b>–§–∏–ª—å—Ç—Ä:</b> {filter_name.title()}
üìä <b>–ú–∞—à–∏–Ω –Ω–∞–π–¥–µ–Ω–æ:</b> {total_cars}

ü§ñ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
{quick_rec}

üí° <i>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {filter_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def send_analysis_summary(self, summaries: List[Dict[str, Any]]):
        """üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            message = "üìä <b>–°–í–û–î–ö–ê AI –ê–ù–ê–õ–ò–ó–ê</b>\n\n"

            for summary in summaries:
                filter_name = summary.get("filter_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                total_cars = summary.get("total_cars", 0)
                success = summary.get("success", False)

                status_emoji = "‚úÖ" if success else "‚ùå"
                message += f"{status_emoji} <b>{filter_name.title()}:</b> {total_cars} –º–∞—à–∏–Ω\n"

                if success and summary.get("quick_recommendation"):
                    rec_short = summary["quick_recommendation"][:80] + "..."
                    message += f"   üí° {rec_short}\n"

                message += "\n"

            message += "<i>ü§ñ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ o3-mini</i>"

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {len(summaries)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ Telegram –±–æ—Ç–∞"""
        await self.bot.session.close()