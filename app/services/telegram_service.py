# app/services/telegram_service.py - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å HTML –æ—Ç—á–µ—Ç–∞–º–∏
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from aiogram.types import FSInputFile
from app.config import settings
from app.models.car import Car
from app.services.html_service import HTMLReportService
from typing import Dict, Any, List
import logging
import os

logger = logging.getLogger(__name__)


class TelegramService:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.html_service = HTMLReportService()
        self.MAX_MESSAGE_LENGTH = 4000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è Telegram

    async def send_new_car_notification(self, car: Car):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ"""
        message = self._format_car_message(car)
        try:
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=False
            )
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—à–∏–Ω—ã ID: {car.id}")
        except TelegramAPIError as e:
            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã ID {car.id}: {e}")
            raise

    async def send_ai_analysis_report(self, analysis_result: Dict[str, Any]):
        """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑: –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É + HTML –æ—Ç—á–µ—Ç"""
        try:
            if not analysis_result.get("success", True):
                error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞</b>\n\n{analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=error_message,
                    parse_mode=ParseMode.HTML
                )
                return

            # 1. –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
            html_file_path = self.html_service.generate_analysis_report(analysis_result)
            report_filename = os.path.basename(html_file_path)

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É
            summary_message = self._create_analysis_summary(analysis_result, report_filename)

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=summary_message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            try:
                html_file = FSInputFile(html_file_path, filename=report_filename)
                await self.bot.send_document(
                    chat_id=settings.telegram_chat_id,
                    document=html_file,
                    caption=f"üìÑ –ü–æ–ª–Ω—ã–π AI –æ—Ç—á–µ—Ç ‚Ä¢ {analysis_result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω"
                )
                logger.info(f"‚úÖ HTML –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {report_filename}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Ñ–∞–π–ª–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
                await self.bot.send_message(
                    chat_id=settings.telegram_chat_id,
                    text=f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: <code>{report_filename}</code>\n"
                         f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram.",
                    parse_mode=ParseMode.HTML
                )

            logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {analysis_result.get('total_cars_analyzed', 0)} –º–∞—à–∏–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self._send_error_notification(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

    def _create_analysis_summary(self, analysis_result: Dict[str, Any], report_filename: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –¥–ª—è Telegram (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞)"""

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
        total_cars = analysis_result.get("total_cars_analyzed", 0)
        model_used = analysis_result.get("model_used", "AI")
        recommended_ids = analysis_result.get("recommended_car_ids", [])

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        message = f"""ü§ñ <b>AI –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù</b>

üìä <b>–§–∏–ª—å—Ç—Ä:</b> {filter_name.title()}
üöó <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</b> {total_cars} –º–∞—à–∏–Ω
‚≠ê <b>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ:</b> {len(recommended_ids)} –º–∞—à–∏–Ω
üß† <b>–ú–æ–¥–µ–ª—å:</b> {model_used}

"""

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ)
        top_recommendations = analysis_result.get("top_recommendations", "")
        if top_recommendations:
            short_recs = self._extract_short_recommendations(top_recommendations)
            message += f"üèÜ <b>–¢–û–ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n{short_recs}\n\n"

        # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        conclusions = analysis_result.get("general_conclusions", "")
        if conclusions:
            short_conclusions = self._extract_short_conclusions(conclusions)
            message += f"üìù <b>–í–´–í–û–î–´:</b>\n{short_conclusions}\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID
        if recommended_ids:
            ids_str = ", ".join(str(id_) for id_ in recommended_ids[:8])  # –ú–∞–∫—Å–∏–º—É–º 8 ID
            if len(recommended_ids) > 8:
                ids_str += f" (+{len(recommended_ids) - 8} –µ—â–µ)"
            message += f"‚≠ê <b>ID —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö:</b> {ids_str}\n\n"

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª–Ω–æ–º –æ—Ç—á–µ—Ç–µ
        message += f"üìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</b> <code>{report_filename}</code>\n"
        message += f"üìé <i>HTML —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏ –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(message) > self.MAX_MESSAGE_LENGTH:
            message = message[
                      :self.MAX_MESSAGE_LENGTH - 100] + f"...\n\nüìÑ <b>–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</b> <code>{report_filename}</code>"

        return message

    def _extract_short_recommendations(self, recommendations: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ø-3)"""

        lines = [line.strip() for line in recommendations.split('\n') if line.strip()]

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        rec_lines = []
        count = 0

        for line in lines:
            if line and not line.startswith('‚îÄ') and count < 3:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                if any(char.isdigit() for char in line[:5]):  # –≠—Ç–æ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                    short_line = line[:80] + "..." if len(line) > 80 else line
                    rec_lines.append(short_line)
                    count += 1

        return '\n'.join(rec_lines) if rec_lines else "–°–º. –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"

    def _extract_short_conclusions(self, conclusions: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã (–ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"""

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = [s.strip() for s in conclusions.replace('\n', ' ').split('.') if s.strip()]

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        short_sentences = sentences[:3]
        short_text = '. '.join(short_sentences)

        if len(short_text) > 300:
            short_text = short_text[:300] + "..."

        return short_text + "." if short_text and not short_text.endswith('.') else short_text

    async def send_quick_analysis_notification(self, analysis_result: Dict[str, Any]):
        """‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            if not analysis_result.get("success", True):
                return

            filter_name = analysis_result.get("filter_name", "–º–∞—à–∏–Ω")
            total_cars = analysis_result.get("total_cars", 0)
            quick_rec = analysis_result.get("quick_recommendation", "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

            # –û–±—Ä–µ–∑–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
            if len(quick_rec) > 200:
                quick_rec = quick_rec[:200] + "..."

            message = f"""‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π AI –∞–Ω–∞–ª–∏–∑</b>

üéØ <b>–§–∏–ª—å—Ç—Ä:</b> {filter_name.title()}
üìä <b>–ú–∞—à–∏–Ω:</b> {total_cars}

ü§ñ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>
{quick_rec}

üí° <i>–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analysis</i>
"""

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {filter_name}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def send_analysis_summary(self, summaries: List[Dict[str, Any]]):
        """üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            message = "üìä <b>–°–í–û–î–ö–ê AI –ê–ù–ê–õ–ò–ó–ê</b>\n\n"

            total_reports = 0
            for summary in summaries:
                filter_name = summary.get("filter_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                total_cars = summary.get("total_cars", 0)
                success = summary.get("success", False)

                status_emoji = "‚úÖ" if success else "‚ùå"
                message += f"{status_emoji} <b>{filter_name.title()}:</b> {total_cars} –º–∞—à–∏–Ω\n"

                if success:
                    total_reports += 1
                    quick_rec = summary.get("quick_recommendation", "")
                    if quick_rec:
                        rec_short = quick_rec[:60] + "..." if len(quick_rec) > 60 else quick_rec
                        message += f"   üí° {rec_short}\n"

                message += "\n"

            message += f"üìÑ <b>–°–æ–∑–¥–∞–Ω–æ HTML –æ—Ç—á–µ—Ç–æ–≤:</b> {total_reports}\n"
            message += "<i>ü§ñ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</i>"

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

            logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {len(summaries)} —Ñ–∏–ª—å—Ç—Ä–æ–≤, {total_reports} –æ—Ç—á–µ—Ç–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")

    async def send_reports_list(self):
        """üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö HTML –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            reports = self.html_service.get_reports_list(10)

            if not reports:
                message = "üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"
            else:
                message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ HTML –æ—Ç—á–µ—Ç—ã</b>\n\n"

                for i, report in enumerate(reports, 1):
                    filename = report["filename"]
                    size = report["size_mb"]
                    created = report["created"]

                    message += f"{i}. <code>{filename}</code>\n"
                    message += f"   üìÖ {created} ‚Ä¢ {size} MB\n\n"

                if len(reports) == 10:
                    message += "<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤</i>"

            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")

    async def _send_error_notification(self, error_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n{error_text}"
            await self.bot.send_message(
                chat_id=settings.telegram_chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _format_car_message(self, car: Car) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω–µ"""
        return f"""
üöó <b>–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - {car.brand}</b>

üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {car.title}
üí∞ <b>–¶–µ–Ω–∞:</b> {car.price}
üìÖ <b>–ì–æ–¥:</b> {car.year or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üõ£ <b>–ü—Ä–æ–±–µ–≥:</b> {f"{car.mileage:,} –∫–º" if car.mileage else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
üìç <b>–ú–µ—Å—Ç–æ:</b> {car.place}
üìÜ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {car.date_posted}

üîó <a href="{car.link}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>

‚öôÔ∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> {car.features}
        """.strip()

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ Telegram –±–æ—Ç–∞"""
        await self.bot.session.close()