# app/services/openai_service.py - –í–ï–†–°–ò–Ø –î–õ–Ø o3-mini
from openai import AsyncOpenAI
from typing import List, Dict, Any
from app.config import settings
from app.models.car import Car
import logging
import asyncio

logger = logging.getLogger(__name__)


class OpenAIService:
    def __init__(self):
        self.client = AsyncOpenAI(api_key=settings.openai_api_key)

    async def analyze_cars(self, cars: List[Car]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—à–∏–Ω —á–µ—Ä–µ–∑ o3-mini"""

        if not cars:
            return {"error": "–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", "total_cars_analyzed": 0}

        cars_data = self._prepare_cars_data(cars)
        prompt = self._build_analysis_prompt(cars_data)

        try:
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú o3-mini
            response = await self.client.chat.completions.create(
                model="o3-mini",
                messages=[
                    {
                        "role": "system",
                        "content": self._get_system_prompt()
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=3000,  # o3-mini –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
                temperature=0.3
            )

            analysis_text = response.choices[0].message.content
            return self._parse_analysis_response(analysis_text, cars)

        except Exception as e:
            logger.error(f"OpenAI API error: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    def _get_system_prompt(self) -> str:
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Ä—ã–Ω–∫–µ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
- –ó–Ω–∞–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ BMW, Mercedes, Audi, Volkswagen
- –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –ï–≤—Ä–æ–ø–µ
- –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ —Ä—ã–Ω–∫–µ –ö–∏–ø—Ä–∞
- –ü—Ä–æ–≥–Ω–æ–∑ –∏–∑–Ω–æ—Å–∞ –ø–æ –ø—Ä–æ–±–µ–≥—É –∏ –≥–æ–¥—É –≤—ã–ø—É—Å–∫–∞
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–º–∞—Ç–∞ –ö–∏–ø—Ä–∞ (–∂–∞—Ä–∞, —Å–æ–ª—å) –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
- –ß–µ—Å—Ç–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –º–æ–¥–µ–ª–µ–π
- –£—á–∏—Ç—ã–≤–∞–π –∫–ª–∏–º–∞—Ç –ö–∏–ø—Ä–∞ (–≤—ã—Å–æ–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –º–æ—Ä—Å–∫–∞—è —Å–æ–ª—å)
- –ü–æ–º–Ω–∏ –ø—Ä–æ –¥–æ—Ä–æ–≥–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º-–±—Ä–µ–Ω–¥–æ–≤
- –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–∞–ª—å–Ω—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

–°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê: –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤. –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""

    def _prepare_cars_data(self, cars: List[Car]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        cars_info = []

        for i, car in enumerate(cars, 1):
            # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤
            price_clean = car.price.replace('‚Ç¨', '').replace(',', '').replace(' ',
                                                                              '').strip() if car.price else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_numeric = ""
            if price_clean.isdigit():
                price_numeric = f" ({int(price_clean):,} –µ–≤—Ä–æ)"

            info = f"""
–ê–≤—Ç–æ–º–æ–±–∏–ª—å #{i}:
‚Ä¢ –ú–æ–¥–µ–ª—å: {car.title}
‚Ä¢ –ú–∞—Ä–∫–∞: {car.brand}
‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {car.year or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ü—Ä–æ–±–µ–≥: {f"{car.mileage:,} –∫–º" if car.mileage else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –¶–µ–Ω–∞: {car.price}{price_numeric}
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {car.features[:250] if car.features else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {car.place}
‚Ä¢ ID –¥–ª—è —Å—Å—ã–ª–∫–∏: {car.id}
"""
            cars_info.append(info)

        return "\n".join(cars_info)

    def _build_analysis_prompt(self, cars_data: str) -> str:
        return f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –ö–∏–ø—Ä–µ. –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞ –∏ —Ä—ã–Ω–∫–∞:

{cars_data}

–ü–†–û–í–ï–î–ò –ê–ù–ê–õ–ò–ó –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:
1. –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã –º–µ—Å—Ç–Ω–æ–º—É —Ä—ã–Ω–∫—É
3. –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–≥—É/–≥–æ–¥—É (—É—á—Ç–∏ –∫–ª–∏–º–∞—Ç –ö–∏–ø—Ä–∞)
4. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø—á–∞—Å—Ç–µ–π
5. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
**–¢–û–ü-3 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
1. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #X - –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ (—Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ/–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å)
2. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #Y - –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞
3. –ê–≤—Ç–æ–º–æ–±–∏–ª—å #Z - –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞

**–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**
–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
- ‚úÖ –ü–ª—é—Å—ã –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- ‚ùå –ú–∏–Ω—É—Å—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- üí∞ –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å —Ü–µ–Ω—ã (–ø–µ—Ä–µ–ø–ª–∞—Ç–∞/–Ω–µ–¥–æ–ø–ª–∞—Ç–∞)
- üîß –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
- üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–û–ö–£–ü–ê–¢–¨/–ù–ï –ü–û–ö–£–ü–ê–¢–¨/–¢–û–†–ì–û–í–ê–¢–¨–°–Ø

**–û–ë–©–ò–ï –í–´–í–û–î–´:**
–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
"""

    def _parse_analysis_response(self, analysis_text: str, cars: List[Car]) -> Dict[str, Any]:
        """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç o3-mini"""
        sections = analysis_text.split("**")

        top_recommendations = ""
        detailed_analysis = ""
        general_conclusions = ""

        for i, section in enumerate(sections):
            if "–¢–û–ü-3" in section or "TOP-3" in section:
                top_recommendations = sections[i + 1] if i + 1 < len(sections) else ""
            elif "–î–ï–¢–ê–õ–¨–ù–´–ô" in section or "DETAILED" in section:
                detailed_analysis = sections[i + 1] if i + 1 < len(sections) else ""
            elif "–û–ë–©–ò–ï" in section or "–í–´–í–û–î–´" in section:
                general_conclusions = sections[i + 1] if i + 1 < len(sections) else ""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID –º–∞—à–∏–Ω
        recommended_ids = self._extract_recommended_car_ids(top_recommendations, cars)

        return {
            "total_cars_analyzed": len(cars),
            "top_recommendations": top_recommendations.strip(),
            "detailed_analysis": detailed_analysis.strip(),
            "general_conclusions": general_conclusions.strip(),
            "full_analysis": analysis_text,
            "recommended_car_ids": recommended_ids,
            "model_used": "o3-mini",  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –º–æ–¥–µ–ª—å
            "cars_data": [
                {
                    "id": car.id,
                    "title": car.title,
                    "brand": car.brand,
                    "year": car.year,
                    "price": car.price,
                    "mileage": car.mileage,
                    "link": car.link
                } for car in cars
            ]
        }

    def _extract_recommended_car_ids(self, recommendations: str, cars: List[Car]) -> List[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "–ê–≤—Ç–æ–º–æ–±–∏–ª—å #1", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å #3"
        car_numbers = re.findall(r'–ê–≤—Ç–æ–º–æ–±–∏–ª—å #(\d+)', recommendations)

        recommended_ids = []
        for num_str in car_numbers:
            try:
                car_index = int(num_str) - 1  # –ò–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
                if 0 <= car_index < len(cars):
                    recommended_ids.append(cars[car_index].id)
            except (ValueError, IndexError):
                continue

        return recommended_ids

    async def get_quick_recommendation(self, cars: List[Car]) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Ç–æ–ø-1 –º–∞—à–∏–Ω—ã —á–µ—Ä–µ–∑ o3-mini"""
        if not cars:
            return "–ù–µ—Ç –º–∞—à–∏–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        try:
            prompt = f"""
–ò–∑ —ç—Ç–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤—ã–±–µ—Ä–∏ –û–î–ù–£ –ª—É—á—à—É—é –ø–æ–∫—É–ø–∫—É –¥–ª—è –ö–∏–ø—Ä–∞:

{self._prepare_cars_data(cars[:5])}

–£—á—Ç–∏: –∫–ª–∏–º–∞—Ç –ö–∏–ø—Ä–∞, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ.
–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: "–†–µ–∫–æ–º–µ–Ω–¥—É—é –ê–≤—Ç–æ–º–æ–±–∏–ª—å #X –ø–æ—Ç–æ–º—É —á—Ç–æ [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞]"
"""

            # –ò–°–ü–û–õ–¨–ó–£–ï–ú o3-mini –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            response = await self.client.chat.completions.create(
                model="o3-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã –∞–≤—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç –Ω–∞ –ö–∏–ø—Ä–µ. –î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=150,
                temperature=0.2
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            logger.error(f"Quick recommendation error: {e}")
            return "–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    async def test_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API —Å o3-mini"""
        try:
            response = await self.client.chat.completions.create(
                model="o3-mini",
                messages=[{"role": "user", "content": "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}],
                max_tokens=10
            )

            return {
                "status": "success",
                "model": "o3-mini",
                "response": response.choices[0].message.content
            }
        except Exception as e:
            logger.error(f"o3-mini connection test failed: {e}")
            return {
                "status": "error",
                "model": "o3-mini",
                "error": str(e)
            }

    async def get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            models = await self.client.models.list()
            available = [model.id for model in models.data if 'gpt' in model.id or 'o3' in model.id]
            return sorted(available)
        except Exception as e:
            logger.error(f"Failed to get models: {e}")
            return ["o3-mini"]  # Fallback