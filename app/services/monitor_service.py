# app/services/monitor_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from app.services.scraper_service import ScraperService
from app.services.telegram_service import TelegramService
from app.services.analysis_service import AnalysisService  # –î–û–ë–ê–í–õ–ï–ù–û
from app.repository.car_repository import CarRepository
from app.database import async_session
from app.config import settings
import logging

logger = logging.getLogger(__name__)


class MonitorService:
    def __init__(self):
        self.scraper = ScraperService()
        self.telegram = TelegramService()
        self.analysis = AnalysisService()  # –î–û–ë–ê–í–õ–ï–ù–û

    async def _is_urgent(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ä–æ—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ AI"""
        if not text:
            return False
        # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π –∫–ª—é—á–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
        keywords = [
            "—Å—Ä–æ—á–Ω–æ", "urgent", "–±—ã—Å—Ç—Ä–æ", "price drop", "–Ω–µ–¥–æ—Ä–æ–≥–æ", "must sell"
        ]
        text_lower = text.lower()
        if any(k in text_lower for k in keywords):
            return True

        # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        try:
            return await self.analysis.openai_service.detect_urgent_sale(text)
        except Exception as e:
            logger.error(f"AI urgent detection error: {e}")
            return False

    async def _process_filter(self, filter_name: str, repo: CarRepository) -> int:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            cars = await self.scraper.scrape_cars(filter_name)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cars)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}")

            new_cars_count = 0
            for car_data in cars:
                existing_car = await repo.get_by_link(car_data.link)
                if not existing_car:
                    new_car = await repo.create(car_data)
                    logger.info(f"–ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {new_car.title}")
                    urgent = await self._is_urgent(new_car.description or "")
                    await self.telegram.send_new_car_notification(new_car, urgent=urgent)
                    await repo.mark_as_notified(new_car.id)
                    new_cars_count += 1

            return new_cars_count

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {e}")
            return 0

    async def check_new_cars(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω + AI –∞–Ω–∞–ª–∏–∑"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")

        new_cars_found = {}  # {filter_name: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–æ–≤—ã—Ö_–º–∞—à–∏–Ω}

        async with async_session() as session:
            repo = CarRepository(session)

            for filter_name in settings.car_filters:
                count = await self._process_filter(filter_name, repo)
                new_cars_found[filter_name] = count

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã
        total_new_cars = sum(new_cars_found.values())

        if total_new_cars > 0:
            logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {total_new_cars} –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...")
            await self._run_ai_analysis_for_new_cars(new_cars_found)
        else:
            logger.info("–ù–æ–≤—ã—Ö –º–∞—à–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _run_ai_analysis_for_new_cars(self, new_cars_found: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏"""

        analysis_summaries = []

        for filter_name, new_count in new_cars_found.items():
            if new_count > 0:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏
                try:
                    logger.info(f"üîç AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è {filter_name} ({new_count} –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω)")

                    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    quick_result = await self.analysis.get_quick_insight(filter_name)

                    if quick_result.get("success"):
                        await self.telegram.send_quick_analysis_notification(quick_result)
                        analysis_summaries.append(quick_result)

                        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—à–∏–Ω (>=3), –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                        if quick_result.get("total_cars", 0) >= 3:
                            full_result = await self.analysis.analyze_cars_by_filter(filter_name, 10)

                            if full_result.get("success"):
                                await self.telegram.send_ai_analysis_report(full_result)
                                logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {filter_name}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {filter_name}: {e}")
                    analysis_summaries.append({
                        "filter_name": filter_name,
                        "success": False,
                        "error": str(e)
                    })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if len(analysis_summaries) > 1:
            await self.telegram.send_analysis_summary(analysis_summaries)

    async def run_manual_ai_analysis(self, filter_name: str = None):
        """üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è API endpoint)"""

        if filter_name:
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            logger.info(f"üîß –†—É—á–Ω–æ–π AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è {filter_name}")

            try:
                result = await self.analysis.analyze_cars_by_filter(filter_name, 15)

                if result.get("success"):
                    await self.telegram.send_ai_analysis_report(result)
                    return {"status": "success", "filter": filter_name,
                            "cars_analyzed": result.get("total_cars_analyzed", 0)}
                else:
                    return {"status": "error", "filter": filter_name, "error": result.get("error")}

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                return {"status": "error", "filter": filter_name, "error": str(e)}

        else:
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            logger.info("üîß –†—É—á–Ω–æ–π AI –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")

            results = []

            for filter_name in settings.car_filters:
                try:
                    quick_result = await self.analysis.get_quick_insight(filter_name)

                    if quick_result.get("success") and quick_result.get("total_cars", 0) >= 2:
                        full_result = await self.analysis.analyze_cars_by_filter(filter_name, 10)

                        if full_result.get("success"):
                            await self.telegram.send_ai_analysis_report(full_result)
                            results.append({"filter": filter_name, "status": "success",
                                            "cars": full_result.get("total_cars_analyzed", 0)})
                        else:
                            results.append(
                                {"filter": filter_name, "status": "error", "error": full_result.get("error")})
                    else:
                        results.append({"filter": filter_name, "status": "skipped", "reason": "insufficient_cars"})

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                    results.append({"filter": filter_name, "status": "error", "error": str(e)})

            return {"status": "completed", "results": results}

