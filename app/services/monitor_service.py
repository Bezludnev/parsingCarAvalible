# app/services/monitor_service.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å urgent –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
from app.services.scraper_service import ScraperService
from app.services.telegram_service import TelegramService
from app.services.analysis_service import AnalysisService
from app.repository.car_repository import CarRepository
from app.database import async_session
from app.config import settings
import logging
from typing import Dict, List

logger = logging.getLogger(__name__)


class MonitorService:
    def __init__(self):
        self.scraper = ScraperService()
        self.telegram = TelegramService()
        self.analysis = AnalysisService()

    async def _is_urgent(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ä–æ—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ AI"""
        if not text:
            return False
        # –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä—ã–π –∫–ª—é—á–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
        keywords = [
            "—Å—Ä–æ—á–Ω–æ", "urgent", "–±—ã—Å—Ç—Ä–æ", "price drop", "–Ω–µ–¥–æ—Ä–æ–≥–æ", "must sell"
        ]
        text_lower = text.lower()
        if any(k in text_lower for k in keywords):
            return True

        # –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        try:
            return await self.analysis.openai_service.detect_urgent_sale(text)
        except Exception as e:
            logger.error(f"AI urgent detection error: {e}")
            return False

    async def _process_filter(self, filter_name: str, repo: CarRepository) -> int:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            filter_config = settings.car_filters.get(filter_name, {})
            is_urgent_filter = filter_config.get("urgent_mode", False)

            cars = await self.scraper.scrape_cars(filter_name)
            logger.info(f"{'üî•' if is_urgent_filter else 'üìä'} "
                        f"–ù–∞–π–¥–µ–Ω–æ {len(cars)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è {filter_name}")

            new_cars_count = 0
            for car_data in cars:
                existing_car = await repo.get_by_link(car_data.link)
                if not existing_car:
                    new_car = await repo.create(car_data)
                    logger.info(f"‚úÖ –ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞: {new_car.title}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º urgent —Å—Ç–∞—Ç—É—Å
                    urgent = await self._is_urgent(new_car.description or "")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º urgent —Ä–µ–∂–∏–º–∞
                    await self.telegram.send_new_car_notification(
                        new_car,
                        urgent=urgent or is_urgent_filter,
                        urgent_filter=is_urgent_filter
                    )

                    await repo.mark_as_notified(new_car.id)
                    new_cars_count += 1

            return new_cars_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞ {filter_name}: {e}")
            return 0

    async def check_new_cars(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω + AI –∞–Ω–∞–ª–∏–∑"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")

        new_cars_found = {}
        urgent_filters_stats = {}

        async with async_session() as session:
            repo = CarRepository(session)

            # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ urgent
            regular_filters = []
            urgent_filters = []

            for filter_name, config in settings.car_filters.items():
                if config.get("urgent_mode", False):
                    urgent_filters.append(filter_name)
                else:
                    regular_filters.append(filter_name)

            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URGENT —Ñ–∏–ª—å—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if urgent_filters:
                logger.info(f"üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º urgent —Ñ–∏–ª—å—Ç—Ä—ã: {urgent_filters}")

                for filter_name in urgent_filters:
                    count = await self._process_filter(filter_name, repo)
                    new_cars_found[filter_name] = count
                    urgent_filters_stats[filter_name] = count

                # –ï—Å–ª–∏ –≤ urgent –Ω–∞–π–¥–µ–Ω—ã –º–∞—à–∏–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
                urgent_total = sum(urgent_filters_stats.values())
                if urgent_total > 0:
                    await self.telegram.send_urgent_summary(urgent_filters_stats)

            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {regular_filters}")

            for filter_name in regular_filters:
                count = await self._process_filter(filter_name, repo)
                new_cars_found[filter_name] = count

        # AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—à–∏–Ω—ã
        total_new_cars = sum(new_cars_found.values())

        if total_new_cars > 0:
            logger.info(f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {total_new_cars} –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑...")
            await self._run_ai_analysis_for_new_cars(new_cars_found, urgent_filters_stats)
        else:
            logger.info("üò¥ –ù–æ–≤—ã—Ö –º–∞—à–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _run_ai_analysis_for_new_cars(self, new_cars_found: dict, urgent_stats: dict):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏"""
        analysis_summaries = []

        for filter_name, new_count in new_cars_found.items():
            if new_count > 0:
                try:
                    filter_config = settings.car_filters.get(filter_name, {})
                    is_urgent_filter = filter_config.get("urgent_mode", False)

                    logger.info(f"üîç AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è {filter_name} "
                                f"({'URGENT' if is_urgent_filter else '–æ–±—ã—á–Ω—ã–π'}) "
                                f"- {new_count} –Ω–æ–≤—ã—Ö –º–∞—à–∏–Ω")

                    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
                    quick_result = await self.analysis.get_quick_insight(filter_name)

                    if quick_result.get("success"):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–º–µ—Ç–∫–æ–π urgent –µ—Å–ª–∏ —ç—Ç–æ urgent —Ñ–∏–ª—å—Ç—Ä
                        await self.telegram.send_quick_analysis_notification(
                            quick_result,
                            urgent_mode=is_urgent_filter
                        )
                        analysis_summaries.append(quick_result)

                        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—à–∏–Ω
                        threshold = 2 if is_urgent_filter else 3

                        if quick_result.get("total_cars", 0) >= threshold:
                            full_result = await self.analysis.analyze_cars_by_filter(filter_name, 15)

                            if full_result.get("success"):
                                await self.telegram.send_ai_analysis_report(
                                    full_result,
                                    urgent_mode=is_urgent_filter
                                )
                                logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {filter_name}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {filter_name}: {e}")

        # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
        if len(analysis_summaries) > 1:
            await self.telegram.send_analysis_summary(analysis_summaries)

    async def run_urgent_check_only(self):
        """üî• –û—Ç–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ urgent —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        logger.info("üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ URGENT —Ñ–∏–ª—å—Ç—Ä–æ–≤...")

        urgent_found = {}

        async with async_session() as session:
            repo = CarRepository(session)

            urgent_filters = [name for name, config in settings.car_filters.items()
                              if config.get("urgent_mode", False)]

            for filter_name in urgent_filters:
                count = await self._process_filter(filter_name, repo)
                urgent_found[filter_name] = count

        total_urgent = sum(urgent_found.values())

        if total_urgent > 0:
            logger.info(f"üî• –ù–∞–π–¥–µ–Ω–æ {total_urgent} urgent –º–∞—à–∏–Ω")
            await self.telegram.send_urgent_summary(urgent_found)

            # AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è urgent
            for filter_name, count in urgent_found.items():
                if count > 0:
                    try:
                        quick_result = await self.analysis.get_quick_insight(filter_name)
                        if quick_result.get("success"):
                            await self.telegram.send_quick_analysis_notification(
                                quick_result, urgent_mode=True
                            )
                    except Exception as e:
                        logger.error(f"‚ùå Urgent AI –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∞ {filter_name}: {e}")
        else:
            logger.info("üò¥ Urgent –º–∞—à–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    async def run_manual_ai_analysis(self, filter_name: str = None):
        """üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π urgent —Ä–µ–∂–∏–º–∞"""
        if filter_name:
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            logger.info(f"üîß –†—É—á–Ω–æ–π AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è {filter_name}")

            filter_config = settings.car_filters.get(filter_name, {})
            is_urgent = filter_config.get("urgent_mode", False)

            try:
                result = await self.analysis.analyze_cars_by_filter(filter_name, 15)

                if result.get("success"):
                    await self.telegram.send_ai_analysis_report(result, urgent_mode=is_urgent)
                    return {
                        "status": "success",
                        "filter": filter_name,
                        "urgent_mode": is_urgent,
                        "cars_analyzed": result.get("total_cars_analyzed", 0)
                    }
                else:
                    return {"status": "error", "filter": filter_name, "error": result.get("error")}

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                return {"status": "error", "filter": filter_name, "error": str(e)}

        else:
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            logger.info("üîß –†—É—á–Ω–æ–π AI –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤")
            results = []

            for filter_name, config in settings.car_filters.items():
                is_urgent = config.get("urgent_mode", False)

                try:
                    quick_result = await self.analysis.get_quick_insight(filter_name)

                    if quick_result.get("success") and quick_result.get("total_cars", 0) >= 2:
                        full_result = await self.analysis.analyze_cars_by_filter(filter_name, 10)

                        if full_result.get("success"):
                            await self.telegram.send_ai_analysis_report(
                                full_result, urgent_mode=is_urgent
                            )
                            results.append({
                                "filter": filter_name,
                                "status": "success",
                                "urgent_mode": is_urgent,
                                "cars": full_result.get("total_cars_analyzed", 0)
                            })
                        else:
                            results.append({
                                "filter": filter_name,
                                "status": "error",
                                "urgent_mode": is_urgent,
                                "error": full_result.get("error")
                            })
                    else:
                        results.append({
                            "filter": filter_name,
                            "status": "skipped",
                            "urgent_mode": is_urgent,
                            "reason": "insufficient_cars"
                        })

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {filter_name}: {e}")
                    results.append({
                        "filter": filter_name,
                        "status": "error",
                        "urgent_mode": is_urgent,
                        "error": str(e)
                    })

            return {"status": "completed", "results": results}

    async def get_filters_status(self) -> Dict:
        """üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ/urgent"""
        regular_filters = []
        urgent_filters = []

        for name, config in settings.car_filters.items():
            filter_info = {
                "name": name,
                "brand": config["brand"],
                "min_year": config["min_year"],
                "max_mileage": config["max_mileage"]
            }

            if config.get("urgent_mode", False):
                urgent_filters.append(filter_info)
            else:
                regular_filters.append(filter_info)

        return {
            "total_filters": len(settings.car_filters),
            "regular_filters": regular_filters,
            "urgent_filters": urgent_filters,
            "urgent_count": len(urgent_filters),
            "regular_count": len(regular_filters)
        }